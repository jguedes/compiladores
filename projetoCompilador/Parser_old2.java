//----------------------------------------------------
// The following code was generated by CUP v0.11b beta 20140220
// Tue May 13 20:47:04 BRT 2014
//----------------------------------------------------

package oficial;

import java.io.File;
import java.io.FileInputStream;
import java.util.Stack;

import java_cup.runtime.ComplexSymbolFactory;
import java_cup.runtime.ComplexSymbolFactory.Location;
import java_cup.runtime.SymbolFactory;

import javax.swing.tree.DefaultMutableTreeNode;
import javax.swing.tree.MutableTreeNode;

/**
 * CUP v0.11b beta 20140220 generated parser.
 * 
 * @version Tue May 13 20:47:04 BRT 2014
 */
public class Parser_old2 extends java_cup.runtime.lr_parser {
	private DefaultMutableTreeNode tree;

	public DefaultMutableTreeNode getTree() {
		return tree;
	}

	public void setTree(DefaultMutableTreeNode tree) {
		this.tree = tree;
	}

	/** Default constructor. */
	public Parser_old2() {
		super();
	}

	/** Constructor which sets the default scanner. */
	public Parser_old2(java_cup.runtime.Scanner s) {
		super(s);
	}

	/** Constructor which sets the default scanner. */
	public Parser_old2(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {
		super(s, sf);
	}

	/** Production table. */
	protected static final short _production_table[][] = unpackFromStrings(new String[] { "\000\053\000\002\002\003\000\002\002\004\000\002\003"
			+ "\004\000\002\003\003\000\002\004\003\000\002\004\003"
			+ "\000\002\004\003\000\002\004\003\000\002\004\003\000"
			+ "\002\005\010\000\002\005\012\000\002\006\007\000\002"
			+ "\007\006\000\002\010\005\000\002\011\005\000\002\012"
			+ "\005\000\002\012\003\000\002\015\003\000\002\015\003"
			+ "\000\002\013\005\000\002\013\003\000\002\016\003\000"
			+ "\002\016\003\000\002\014\005\000\002\014\003\000\002"
			+ "\017\003\000\002\017\003\000\002\034\005\000\002\034"
			+ "\003\000\002\034\003\000\002\020\003\000\002\021\003"
			+ "\000\002\022\003\000\002\023\003\000\002\024\003\000"
			+ "\002\025\003\000\002\026\003\000\002\027\003\000\002"
			+ "\030\003\000\002\031\003\000\002\035\003\000\002\032"
			+ "\003\000\002\033\003" });

	/** Access to production table. */
	public short[][] production_table() {
		return _production_table;
	}

	/** Parse-action table. */
	protected static final short[][] _action_table = unpackFromStrings(new String[] { "\000\105\000\014\004\006\010\024\012\004\013\007\014"
			+ "\010\001\002\000\004\014\uffdb\001\002\000\016\002\001"
			+ "\004\006\010\024\012\004\013\007\014\010\001\002\000"
			+ "\010\014\uffe3\024\uffe3\027\uffe3\001\002\000\010\014\uffda"
			+ "\024\uffda\027\uffda\001\002\000\026\005\uffdd\015\uffdd\016"
			+ "\uffdd\017\uffdd\020\uffdd\021\uffdd\022\uffdd\023\uffdd\025\uffdd"
			+ "\026\uffdd\001\002\000\014\004\006\010\024\012\004\013"
			+ "\007\014\010\001\002\000\004\002\102\001\002\000\024"
			+ "\002\ufffc\004\ufffc\006\ufffc\007\ufffc\010\ufffc\011\ufffc\012"
			+ "\ufffc\013\ufffc\014\ufffc\001\002\000\024\002\ufff9\004\ufff9"
			+ "\006\ufff9\007\ufff9\010\ufff9\011\ufff9\012\ufff9\013\ufff9\014"
			+ "\ufff9\001\002\000\010\014\010\024\034\027\030\001\002"
			+ "\000\004\023\061\001\002\000\024\002\ufffd\004\ufffd\006"
			+ "\ufffd\007\ufffd\010\ufffd\011\ufffd\012\ufffd\013\ufffd\014\ufffd"
			+ "\001\002\000\024\002\ufffa\004\ufffa\006\ufffa\007\ufffa\010"
			+ "\ufffa\011\ufffa\012\ufffa\013\ufffa\014\ufffa\001\002\000\004"
			+ "\014\010\001\002\000\024\002\ufffb\004\ufffb\006\ufffb\007"
			+ "\ufffb\010\ufffb\011\ufffb\012\ufffb\013\ufffb\014\ufffb\001\002"
			+ "\000\010\014\010\024\034\027\030\001\002\000\014\004"
			+ "\uffdf\010\uffdf\012\uffdf\013\uffdf\014\uffdf\001\002\000\024"
			+ "\002\ufffe\004\ufffe\006\ufffe\007\ufffe\010\ufffe\011\ufffe\012"
			+ "\ufffe\013\ufffe\014\ufffe\001\002\000\024\005\uffe4\015\uffe4"
			+ "\016\uffe4\017\uffe4\020\uffe4\021\uffe4\022\uffe4\025\uffe4\026"
			+ "\uffe4\001\002\000\024\005\uffe9\015\uffe9\016\uffe9\017\uffe9"
			+ "\020\uffe9\021\uffe9\022\uffe9\025\uffe9\026\uffe9\001\002\000"
			+ "\024\005\uffd9\015\uffd9\016\uffd9\017\uffd9\020\uffd9\021\uffd9"
			+ "\022\uffd9\025\uffd9\026\uffd9\001\002\000\024\005\uffed\015"
			+ "\uffed\016\uffed\017\053\020\055\021\uffed\022\uffed\025\uffed"
			+ "\026\uffed\001\002\000\004\026\052\001\002\000\024\005"
			+ "\uffe5\015\uffe5\016\uffe5\017\uffe5\020\uffe5\021\uffe5\022\uffe5"
			+ "\025\uffe5\026\uffe5\001\002\000\010\014\uffd8\024\uffd8\027"
			+ "\uffd8\001\002\000\010\014\010\024\034\027\030\001\002"
			+ "\000\020\005\ufff1\015\040\016\044\021\043\022\041\025"
			+ "\ufff1\026\ufff1\001\002\000\010\014\010\024\034\027\030"
			+ "\001\002\000\010\014\uffec\024\uffec\027\uffec\001\002\000"
			+ "\010\014\ufff0\024\ufff0\027\ufff0\001\002\000\010\014\010"
			+ "\024\034\027\030\001\002\000\010\014\uffef\024\uffef\027"
			+ "\uffef\001\002\000\010\014\uffeb\024\uffeb\027\uffeb\001\002"
			+ "\000\014\005\ufff2\015\040\016\044\025\ufff2\026\ufff2\001"
			+ "\002\000\020\005\uffee\015\040\016\044\021\uffee\022\uffee"
			+ "\025\uffee\026\uffee\001\002\000\004\025\050\001\002\000"
			+ "\024\005\uffd7\015\uffd7\016\uffd7\017\uffd7\020\uffd7\021\uffd7"
			+ "\022\uffd7\025\uffd7\026\uffd7\001\002\000\024\005\uffe6\015"
			+ "\uffe6\016\uffe6\017\uffe6\020\uffe6\021\uffe6\022\uffe6\025\uffe6"
			+ "\026\uffe6\001\002\000\024\002\ufff3\004\ufff3\006\ufff3\007"
			+ "\ufff3\010\ufff3\011\ufff3\012\ufff3\013\ufff3\014\ufff3\001\002"
			+ "\000\010\014\uffe8\024\uffe8\027\uffe8\001\002\000\010\014"
			+ "\010\024\034\027\030\001\002\000\010\014\uffe7\024\uffe7"
			+ "\027\uffe7\001\002\000\024\005\uffea\015\uffea\016\uffea\017"
			+ "\uffea\020\uffea\021\uffea\022\uffea\025\uffea\026\uffea\001\002"
			+ "\000\004\026\060\001\002\000\024\002\ufff4\004\ufff4\006"
			+ "\ufff4\007\ufff4\010\ufff4\011\ufff4\012\ufff4\013\ufff4\014\ufff4"
			+ "\001\002\000\010\014\uffdc\024\uffdc\027\uffdc\001\002\000"
			+ "\010\014\010\024\034\027\030\001\002\000\004\026\064"
			+ "\001\002\000\024\002\ufff5\004\ufff5\006\ufff5\007\ufff5\010"
			+ "\ufff5\011\ufff5\012\ufff5\013\ufff5\014\ufff5\001\002\000\004"
			+ "\005\066\001\002\000\014\004\uffe2\010\uffe2\012\uffe2\013"
			+ "\uffe2\014\uffe2\001\002\000\014\004\006\010\024\012\004"
			+ "\013\007\014\010\001\002\000\020\004\006\006\071\007"
			+ "\073\010\024\012\004\013\007\014\010\001\002\000\014"
			+ "\004\uffe0\010\uffe0\012\uffe0\013\uffe0\014\uffe0\001\002\000"
			+ "\004\026\101\001\002\000\004\026\uffe1\001\002\000\014"
			+ "\004\006\010\024\012\004\013\007\014\010\001\002\000"
			+ "\024\002\uffff\004\uffff\006\uffff\007\uffff\010\uffff\011\uffff"
			+ "\012\uffff\013\uffff\014\uffff\001\002\000\016\004\006\007"
			+ "\073\010\024\012\004\013\007\014\010\001\002\000\004"
			+ "\026\100\001\002\000\024\002\ufff7\004\ufff7\006\ufff7\007"
			+ "\ufff7\010\ufff7\011\ufff7\012\ufff7\013\ufff7\014\ufff7\001\002"
			+ "\000\024\002\ufff8\004\ufff8\006\ufff8\007\ufff8\010\ufff8\011"
			+ "\ufff8\012\ufff8\013\ufff8\014\ufff8\001\002\000\004\002\000"
			+ "\001\002\000\016\004\006\010\024\011\105\012\004\013"
			+ "\007\014\010\001\002\000\010\014\010\024\034\027\030"
			+ "\001\002\000\010\014\uffde\024\uffde\027\uffde\001\002\000"
			+ "\004\026\107\001\002\000\024\002\ufff6\004\ufff6\006\ufff6"
			+ "\007\ufff6\010\ufff6\011\ufff6\012\ufff6\013\ufff6\014\ufff6\001"
			+ "\002" });

	/** Access to parse-action table. */
	public short[][] action_table() {
		return _action_table;
	}

	/** <code>reduce_goto</code> table. */
	protected static final short[][] _reduce_table = unpackFromStrings(new String[] { "\000\105\000\034\002\011\003\004\004\024\005\016\006"
			+ "\012\007\021\010\017\011\013\020\014\024\010\026\015"
			+ "\030\020\031\022\001\001\000\002\001\001\000\030\004"
			+ "\074\005\016\006\012\007\021\010\017\011\013\020\014"
			+ "\024\010\026\015\030\020\031\022\001\001\000\002\001"
			+ "\001\000\002\001\001\000\002\001\001\000\032\003\102"
			+ "\004\024\005\016\006\012\007\021\010\017\011\013\020"
			+ "\014\024\010\026\015\030\020\031\022\001\001\000\002"
			+ "\001\001\000\002\001\001\000\002\001\001\000\020\012"
			+ "\064\013\035\014\030\026\025\032\034\034\026\035\032"
			+ "\001\001\000\004\027\061\001\001\000\002\001\001\000"
			+ "\002\001\001\000\004\026\056\001\001\000\002\001\001"
			+ "\000\020\012\031\013\035\014\030\026\025\032\034\034"
			+ "\026\035\032\001\001\000\002\001\001\000\002\001\001"
			+ "\000\002\001\001\000\002\001\001\000\002\001\001\000"
			+ "\004\017\053\001\001\000\002\001\001\000\002\001\001"
			+ "\000\002\001\001\000\020\012\046\013\035\014\030\026"
			+ "\025\032\034\034\026\035\032\001\001\000\006\015\041"
			+ "\016\036\001\001\000\016\013\045\014\030\026\025\032"
			+ "\034\034\026\035\032\001\001\000\002\001\001\000\002"
			+ "\001\001\000\016\013\044\014\030\026\025\032\034\034"
			+ "\026\035\032\001\001\000\002\001\001\000\002\001\001"
			+ "\000\004\016\036\001\001\000\004\016\036\001\001\000"
			+ "\004\033\050\001\001\000\002\001\001\000\002\001\001"
			+ "\000\002\001\001\000\002\001\001\000\012\026\025\032"
			+ "\034\034\055\035\032\001\001\000\002\001\001\000\002"
			+ "\001\001\000\002\001\001\000\002\001\001\000\002\001"
			+ "\001\000\020\012\062\013\035\014\030\026\025\032\034"
			+ "\034\026\035\032\001\001\000\002\001\001\000\002\001"
			+ "\001\000\004\021\066\001\001\000\002\001\001\000\032"
			+ "\003\067\004\024\005\016\006\012\007\021\010\017\011"
			+ "\013\020\014\024\010\026\015\030\020\031\022\001\001"
			+ "\000\034\004\074\005\016\006\012\007\021\010\017\011"
			+ "\013\020\014\022\071\023\073\024\010\026\015\030\020"
			+ "\031\022\001\001\000\002\001\001\000\002\001\001\000"
			+ "\002\001\001\000\032\003\075\004\024\005\016\006\012"
			+ "\007\021\010\017\011\013\020\014\024\010\026\015\030"
			+ "\020\031\022\001\001\000\002\001\001\000\032\004\074"
			+ "\005\016\006\012\007\021\010\017\011\013\020\014\022"
			+ "\076\024\010\026\015\030\020\031\022\001\001\000\002"
			+ "\001\001\000\002\001\001\000\002\001\001\000\002\001"
			+ "\001\000\032\004\074\005\016\006\012\007\021\010\017"
			+ "\011\013\020\014\024\010\025\103\026\015\030\020\031"
			+ "\022\001\001\000\020\012\105\013\035\014\030\026\025"
			+ "\032\034\034\026\035\032\001\001\000\002\001\001\000"
			+ "\002\001\001\000\002\001\001" });

	/** Access to <code>reduce_goto</code> table. */
	public short[][] reduce_table() {
		return _reduce_table;
	}

	/** Instance of action encapsulation class. */
	protected CUP$Parser$actions action_obj;

	/** Action encapsulation object initializer. */
	protected void init_actions() {
		action_obj = new CUP$Parser$actions(this);
	}

	/** Invoke a user supplied parse action. */
	public java_cup.runtime.Symbol do_action(int act_num,
			java_cup.runtime.lr_parser parser, java.util.Stack stack, int top)
			throws java.lang.Exception {
		/* call code in generated class */
		return action_obj.CUP$Parser$do_action(act_num, parser, stack, top);
	}

	/** Indicates start state. */
	public int start_state() {
		return 0;
	}

	/** Indicates start production. */
	public int start_production() {
		return 1;
	}

	/** <code>EOF</code> Symbol index. */
	public int EOF_sym() {
		return 0;
	}

	/** <code>error</code> Symbol index. */
	public int error_sym() {
		return 1;
	}

	public static DefaultMutableTreeNode main(String args[]) throws Exception {
		File[] file = {
				new File("src/oficial/programasEmTiny/lerEntrada.tiny"),
				new File("src/oficial/programasEmTiny/fatorial.tiny"),
				new File("src/oficial/programasEmTiny/exponencial.tiny"),
				new File(
						"src/oficial/programasEmTiny/contadorDeAlgarismos.tiny") };

		SymbolFactory sf = new ComplexSymbolFactory();

		Parser parser;

		if (args.length == 0) {

			parser = new Parser(new Scanner(new FileInputStream(file[0]), sf),
					sf);

		} else {

			parser = new Parser(new Scanner(
					new java.io.FileInputStream(args[0]), sf), sf);
		}

		parser.parse();

		return parser.getTree();

	}

}

/** Cup generated class to encapsulate user supplied action code. */
class CUP$Parser$actions {
	private final Parser parser;
	private Stack<DefaultMutableTreeNode> stackNodes = new Stack<DefaultMutableTreeNode>();

	/** Constructor */
	CUP$Parser$actions(Parser parser) {
		this.parser = parser;
	}

	/** Method 0 with the actual generated action code for actions 0 to 300. */
	public final java_cup.runtime.Symbol CUP$Parser$do_action_part00000000(
			int CUP$Parser$act_num,
			java_cup.runtime.lr_parser CUP$Parser$parser,
			java.util.Stack CUP$Parser$stack, int CUP$Parser$top)
			throws java.lang.Exception {
		/* Symbol object for return from actions */
		java_cup.runtime.Symbol CUP$Parser$result;

		/* select the action based on the action number */
		switch (CUP$Parser$act_num) {
		/* . . . . . . . . . . . . . . . . . . . . */
		case 0: // programa ::= sequencia_sent
		{
			Object RESULT = null;
			System.out.println("programa ::= sequencia_sent");
			CUP$Parser$result = parser
					.getSymbolFactory()
					.newSymbol(
							"programa",
							0,
							((java_cup.runtime.Symbol) CUP$Parser$stack.peek()),
							((java_cup.runtime.Symbol) CUP$Parser$stack.peek()),
							RESULT);

			addNonTerminal(CUP$Parser$result, 1);

			parser.setTree(stackNodes.pop());

		}
			break;

		/* . . . . . . . . . . . . . . . . . . . . */
		case 1: // $START ::= programa EOF
		{
			Object RESULT = null;
			Location start_valxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol) CUP$Parser$stack
					.elementAt(CUP$Parser$top - 1)).xleft;
			Location start_valxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol) CUP$Parser$stack
					.elementAt(CUP$Parser$top - 1)).xright;
			Object start_val = (Object) ((java_cup.runtime.Symbol) CUP$Parser$stack
					.elementAt(CUP$Parser$top - 1)).value;
			RESULT = start_val;
			CUP$Parser$result = parser
					.getSymbolFactory()
					.newSymbol(
							"$START",
							0,
							((java_cup.runtime.Symbol) CUP$Parser$stack
									.elementAt(CUP$Parser$top - 1)),
							((java_cup.runtime.Symbol) CUP$Parser$stack.peek()),
							RESULT);
		}
			/* ACCEPT */
			CUP$Parser$parser.done_parsing();
			break;

		/* . . . . . . . . . . . . . . . . . . . . */
		case 2: // sequencia_sent ::= sequencia_sent sent
		{
			Object RESULT = null;
			System.out.println("sequencia_sent ::= sequencia_sent sent");
			CUP$Parser$result = parser
					.getSymbolFactory()
					.newSymbol(
							"sequencia_sent",
							1,
							((java_cup.runtime.Symbol) CUP$Parser$stack
									.elementAt(CUP$Parser$top - 1)),
							((java_cup.runtime.Symbol) CUP$Parser$stack.peek()),
							RESULT);

			addNonTerminal(CUP$Parser$result, 2);

		}
			break;

		/* . . . . . . . . . . . . . . . . . . . . */
		case 3: // sequencia_sent ::= sent
		{
			Object RESULT = null;
			System.out.println("sequencia_sent ::= sent");
			CUP$Parser$result = parser
					.getSymbolFactory()
					.newSymbol(
							"sequencia_sent",
							1,
							((java_cup.runtime.Symbol) CUP$Parser$stack.peek()),
							((java_cup.runtime.Symbol) CUP$Parser$stack.peek()),
							RESULT);

			addNonTerminal(CUP$Parser$result, 1);

		}
			break;

		/* . . . . . . . . . . . . . . . . . . . . */
		case 4: // sent ::= sent_if
		{
			Object RESULT = null;
			System.out.println("sent ::= sent_if");
			CUP$Parser$result = parser
					.getSymbolFactory()
					.newSymbol(
							"sent",
							2,
							((java_cup.runtime.Symbol) CUP$Parser$stack.peek()),
							((java_cup.runtime.Symbol) CUP$Parser$stack.peek()),
							RESULT);

			addNonTerminal(CUP$Parser$result, 1);

		}
			break;

		/* . . . . . . . . . . . . . . . . . . . . */
		case 5: // sent ::= sent_repeat
		{
			Object RESULT = null;
			System.out.println("sent ::= sent_repeat");
			CUP$Parser$result = parser
					.getSymbolFactory()
					.newSymbol(
							"sent",
							2,
							((java_cup.runtime.Symbol) CUP$Parser$stack.peek()),
							((java_cup.runtime.Symbol) CUP$Parser$stack.peek()),
							RESULT);

			addNonTerminal(CUP$Parser$result, 1);

		}
			break;

		/* . . . . . . . . . . . . . . . . . . . . */
		case 6: // sent ::= sent_assign
		{
			Object RESULT = null;
			System.out.println("sent ::= sent_assign");
			CUP$Parser$result = parser
					.getSymbolFactory()
					.newSymbol(
							"sent",
							2,
							((java_cup.runtime.Symbol) CUP$Parser$stack.peek()),
							((java_cup.runtime.Symbol) CUP$Parser$stack.peek()),
							RESULT);

			addNonTerminal(CUP$Parser$result, 1);

		}
			break;

		/* . . . . . . . . . . . . . . . . . . . . */
		case 7: // sent ::= sent_read
		{
			Object RESULT = null;
			System.out.println("sent ::= sent_read");
			CUP$Parser$result = parser
					.getSymbolFactory()
					.newSymbol(
							"sent",
							2,
							((java_cup.runtime.Symbol) CUP$Parser$stack.peek()),
							((java_cup.runtime.Symbol) CUP$Parser$stack.peek()),
							RESULT);

			addNonTerminal(CUP$Parser$result, 1);

		}
			break;

		/* . . . . . . . . . . . . . . . . . . . . */
		case 8: // sent ::= sent_write
		{
			Object RESULT = null;
			System.out.println("sent ::= sent_write");
			CUP$Parser$result = parser
					.getSymbolFactory()
					.newSymbol(
							"sent",
							2,
							((java_cup.runtime.Symbol) CUP$Parser$stack.peek()),
							((java_cup.runtime.Symbol) CUP$Parser$stack.peek()),
							RESULT);

			addNonTerminal(CUP$Parser$result, 1);

		}
			break;

		/* . . . . . . . . . . . . . . . . . . . . */
		case 9: // sent_if ::= if exp then sequencia_sent end SEMI
		{
			Object RESULT = null;
			System.out
					.println("sent_if ::= if exp then sequencia_sent end SEMI");
			CUP$Parser$result = parser
					.getSymbolFactory()
					.newSymbol(
							"sent_if",
							3,
							((java_cup.runtime.Symbol) CUP$Parser$stack
									.elementAt(CUP$Parser$top - 5)),
							((java_cup.runtime.Symbol) CUP$Parser$stack.peek()),
							RESULT);

			addNonTerminal(CUP$Parser$result, 5);

		}
			break;

		/* . . . . . . . . . . . . . . . . . . . . */
		case 10: // sent_if ::= if exp then sequencia_sent else sequencia_sent
					// end SEMI
		{
			Object RESULT = null;
			System.out
					.println("sent_if ::= if exp then sequencia_sent else sequencia_sent end SEMI");
			CUP$Parser$result = parser
					.getSymbolFactory()
					.newSymbol(
							"sent_if",
							3,
							((java_cup.runtime.Symbol) CUP$Parser$stack
									.elementAt(CUP$Parser$top - 7)),
							((java_cup.runtime.Symbol) CUP$Parser$stack.peek()),
							RESULT);

			addNonTerminal(CUP$Parser$result, 7);

		}
			break;

		/* . . . . . . . . . . . . . . . . . . . . */
		case 11: // sent_repeat ::= repeat sequencia_sent until exp SEMI
		{
			Object RESULT = null;
			System.out
					.println("sent_repeat ::= repeat sequencia_sent until exp SEMI");
			CUP$Parser$result = parser
					.getSymbolFactory()
					.newSymbol(
							"sent_repeat",
							4,
							((java_cup.runtime.Symbol) CUP$Parser$stack
									.elementAt(CUP$Parser$top - 4)),
							((java_cup.runtime.Symbol) CUP$Parser$stack.peek()),
							RESULT);

			addNonTerminal(CUP$Parser$result, 4);

		}
			break;

		/* . . . . . . . . . . . . . . . . . . . . */
		case 12: // sent_assign ::= id op_atribb exp SEMI
		{
			Object RESULT = null;
			System.out.println("sent_assign ::= id op_atribb exp SEMI");
			CUP$Parser$result = parser
					.getSymbolFactory()
					.newSymbol(
							"sent_assign",
							5,
							((java_cup.runtime.Symbol) CUP$Parser$stack
									.elementAt(CUP$Parser$top - 3)),
							((java_cup.runtime.Symbol) CUP$Parser$stack.peek()),
							RESULT);

			addNonTerminal(CUP$Parser$result, 3);

		}
			break;

		/* . . . . . . . . . . . . . . . . . . . . */
		case 13: // sent_read ::= read id SEMI
		{
			Object RESULT = null;
			System.out.println("sent_read ::= read id SEMI");
			CUP$Parser$result = parser
					.getSymbolFactory()
					.newSymbol(
							"sent_read",
							6,
							((java_cup.runtime.Symbol) CUP$Parser$stack
									.elementAt(CUP$Parser$top - 2)),
							((java_cup.runtime.Symbol) CUP$Parser$stack.peek()),
							RESULT);

			addNonTerminal(CUP$Parser$result, 2);

		}
			break;

		/* . . . . . . . . . . . . . . . . . . . . */
		case 14: // sent_write ::= write exp SEMI
		{
			Object RESULT = null;
			System.out.println("sent_write ::= write exp SEMI");
			CUP$Parser$result = parser
					.getSymbolFactory()
					.newSymbol(
							"sent_write",
							7,
							((java_cup.runtime.Symbol) CUP$Parser$stack
									.elementAt(CUP$Parser$top - 2)),
							((java_cup.runtime.Symbol) CUP$Parser$stack.peek()),
							RESULT);

			addNonTerminal(CUP$Parser$result, 2);

		}
			break;

		/* . . . . . . . . . . . . . . . . . . . . */
		case 15: // exp ::= exp_simple op_comp exp_simple
		{
			Object RESULT = null;
			System.out.println("exp ::= exp_simple op_comp exp_simple");
			CUP$Parser$result = parser
					.getSymbolFactory()
					.newSymbol(
							"exp",
							8,
							((java_cup.runtime.Symbol) CUP$Parser$stack
									.elementAt(CUP$Parser$top - 2)),
							((java_cup.runtime.Symbol) CUP$Parser$stack.peek()),
							RESULT);

			addNonTerminal(CUP$Parser$result, 3);

		}
			break;

		/* . . . . . . . . . . . . . . . . . . . . */
		case 16: // exp ::= exp_simple
		{
			Object RESULT = null;
			System.out.println("exp ::= exp_simple");
			CUP$Parser$result = parser
					.getSymbolFactory()
					.newSymbol(
							"exp",
							8,
							((java_cup.runtime.Symbol) CUP$Parser$stack.peek()),
							((java_cup.runtime.Symbol) CUP$Parser$stack.peek()),
							RESULT);

			addNonTerminal(CUP$Parser$result, 1);

		}
			break;

		/* . . . . . . . . . . . . . . . . . . . . */
		case 17: // op_comp ::= OP_MQ
		{
			Object RESULT = null;
			System.out.println("op_comp ::= OP_MQ");
			CUP$Parser$result = parser
					.getSymbolFactory()
					.newSymbol(
							"op_comp",
							11,
							((java_cup.runtime.Symbol) CUP$Parser$stack.peek()),
							((java_cup.runtime.Symbol) CUP$Parser$stack.peek()),
							RESULT);

			addTerminal(CUP$Parser$stack, CUP$Parser$result);

		}
			break;

		/* . . . . . . . . . . . . . . . . . . . . */
		case 18: // op_comp ::= OP_IGUAL
		{
			Object RESULT = null;
			System.out.println("op_comp ::= OP_IGUAL");
			CUP$Parser$result = parser
					.getSymbolFactory()
					.newSymbol(
							"op_comp",
							11,
							((java_cup.runtime.Symbol) CUP$Parser$stack.peek()),
							((java_cup.runtime.Symbol) CUP$Parser$stack.peek()),
							RESULT);

			addTerminal(CUP$Parser$stack, CUP$Parser$result);

		}
			break;

		/* . . . . . . . . . . . . . . . . . . . . */
		case 19: // exp_simple ::= exp_simple op_add exp_simple
		{
			Object RESULT = null;
			System.out.println("exp_simple ::= exp_simple op_add exp_simple");
			CUP$Parser$result = parser
					.getSymbolFactory()
					.newSymbol(
							"exp_simple",
							9,
							((java_cup.runtime.Symbol) CUP$Parser$stack
									.elementAt(CUP$Parser$top - 2)),
							((java_cup.runtime.Symbol) CUP$Parser$stack.peek()),
							RESULT);

			addNonTerminal(CUP$Parser$result, 3);

		}
			break;

		/* . . . . . . . . . . . . . . . . . . . . */
		case 20: // exp_simple ::= term
		{
			Object RESULT = null;
			System.out.println("exp_simple ::= term");
			CUP$Parser$result = parser
					.getSymbolFactory()
					.newSymbol(
							"exp_simple",
							9,
							((java_cup.runtime.Symbol) CUP$Parser$stack.peek()),
							((java_cup.runtime.Symbol) CUP$Parser$stack.peek()),
							RESULT);

			addNonTerminal(CUP$Parser$result, 1);

		}
			break;

		/* . . . . . . . . . . . . . . . . . . . . */
		case 21: // op_add ::= OP_ADD
		{
			Object RESULT = null;
			System.out.println("op_add ::= OP_ADD");
			CUP$Parser$result = parser
					.getSymbolFactory()
					.newSymbol(
							"op_add",
							12,
							((java_cup.runtime.Symbol) CUP$Parser$stack.peek()),
							((java_cup.runtime.Symbol) CUP$Parser$stack.peek()),
							RESULT);

			addTerminal(CUP$Parser$stack, CUP$Parser$result);

		}
			break;

		/* . . . . . . . . . . . . . . . . . . . . */
		case 22: // op_add ::= OP_SUB
		{
			Object RESULT = null;
			System.out.println("op_add ::= OP_SUB");
			CUP$Parser$result = parser
					.getSymbolFactory()
					.newSymbol(
							"op_add",
							12,
							((java_cup.runtime.Symbol) CUP$Parser$stack.peek()),
							((java_cup.runtime.Symbol) CUP$Parser$stack.peek()),
							RESULT);
			addTerminal(CUP$Parser$stack, CUP$Parser$result);

		}
			break;

		/* . . . . . . . . . . . . . . . . . . . . */
		case 23: // term ::= term op_mult op_factor
		{
			Object RESULT = null;
			System.out.println("term ::= term op_mult op_factor");
			CUP$Parser$result = parser
					.getSymbolFactory()
					.newSymbol(
							"term",
							10,
							((java_cup.runtime.Symbol) CUP$Parser$stack
									.elementAt(CUP$Parser$top - 2)),
							((java_cup.runtime.Symbol) CUP$Parser$stack.peek()),
							RESULT);

			addNonTerminal(CUP$Parser$result, 3);

		}
			break;

		/* . . . . . . . . . . . . . . . . . . . . */
		case 24: // term ::= op_factor
		{
			Object RESULT = null;
			System.out.println("term ::= op_factor");
			CUP$Parser$result = parser
					.getSymbolFactory()
					.newSymbol(
							"term",
							10,
							((java_cup.runtime.Symbol) CUP$Parser$stack.peek()),
							((java_cup.runtime.Symbol) CUP$Parser$stack.peek()),
							RESULT);

			addNonTerminal(CUP$Parser$result, 1);

		}
			break;

		/* . . . . . . . . . . . . . . . . . . . . */
		case 25: // op_mult ::= OP_MULT
		{
			Object RESULT = null;
			System.out.println("op_mult ::= OP_MULT");
			CUP$Parser$result = parser
					.getSymbolFactory()
					.newSymbol(
							"op_mult",
							13,
							((java_cup.runtime.Symbol) CUP$Parser$stack.peek()),
							((java_cup.runtime.Symbol) CUP$Parser$stack.peek()),
							RESULT);

			addTerminal(CUP$Parser$stack, CUP$Parser$result);

		}
			break;

		/* . . . . . . . . . . . . . . . . . . . . */
		case 26: // op_mult ::= OP_QUOC
		{
			Object RESULT = null;
			System.out.println("op_mult ::= OP_QUOC");
			CUP$Parser$result = parser
					.getSymbolFactory()
					.newSymbol(
							"op_mult",
							13,
							((java_cup.runtime.Symbol) CUP$Parser$stack.peek()),
							((java_cup.runtime.Symbol) CUP$Parser$stack.peek()),
							RESULT);

			addTerminal(CUP$Parser$stack, CUP$Parser$result);

		}
			break;

		/* . . . . . . . . . . . . . . . . . . . . */
		case 27: // op_factor ::= lparen exp rparen
		{
			Integer RESULT = null;
			System.out.println("op_factor ::= lparen exp rparen");
			CUP$Parser$result = parser
					.getSymbolFactory()
					.newSymbol(
							"op_factor",
							26,
							((java_cup.runtime.Symbol) CUP$Parser$stack
									.elementAt(CUP$Parser$top - 2)),
							((java_cup.runtime.Symbol) CUP$Parser$stack.peek()),
							RESULT);

			addNonTerminal(CUP$Parser$result, 3);

		}
			break;

		/* . . . . . . . . . . . . . . . . . . . . */
		case 28: // op_factor ::= number
		{
			Integer RESULT = null;
			System.out.println("op_factor ::= number");
			CUP$Parser$result = parser
					.getSymbolFactory()
					.newSymbol(
							"op_factor",
							26,
							((java_cup.runtime.Symbol) CUP$Parser$stack.peek()),
							((java_cup.runtime.Symbol) CUP$Parser$stack.peek()),
							RESULT);

			addNonTerminal(CUP$Parser$result, 1);

		}
			break;

		/* . . . . . . . . . . . . . . . . . . . . */
		case 29: // op_factor ::= id
		{
			Integer RESULT = null;
			System.out.println("op_factor ::= id");
			CUP$Parser$result = parser
					.getSymbolFactory()
					.newSymbol(
							"op_factor",
							26,
							((java_cup.runtime.Symbol) CUP$Parser$stack.peek()),
							((java_cup.runtime.Symbol) CUP$Parser$stack.peek()),
							RESULT);

			addNonTerminal(CUP$Parser$result, 1);

		}
			break;

		/* . . . . . . . . . . . . . . . . . . . . */
		case 30: // if ::= IF
		{
			Object RESULT = null;
			System.out.println("if ::= IF");
			CUP$Parser$result = parser
					.getSymbolFactory()
					.newSymbol(
							"if",
							14,
							((java_cup.runtime.Symbol) CUP$Parser$stack.peek()),
							((java_cup.runtime.Symbol) CUP$Parser$stack.peek()),
							RESULT);

			addTerminal(CUP$Parser$stack, CUP$Parser$result);

		}
			break;

		/* . . . . . . . . . . . . . . . . . . . . */
		case 31: // then ::= THEN
		{
			Object RESULT = null;
			System.out.println("then ::= THEN");
			CUP$Parser$result = parser
					.getSymbolFactory()
					.newSymbol(
							"then",
							15,
							((java_cup.runtime.Symbol) CUP$Parser$stack.peek()),
							((java_cup.runtime.Symbol) CUP$Parser$stack.peek()),
							RESULT);

			addTerminal(CUP$Parser$stack, CUP$Parser$result);

		}
			break;

		/* . . . . . . . . . . . . . . . . . . . . */
		case 32: // end ::= END
		{
			Object RESULT = null;
			System.out.println("end ::= END");
			CUP$Parser$result = parser
					.getSymbolFactory()
					.newSymbol(
							"end",
							16,
							((java_cup.runtime.Symbol) CUP$Parser$stack.peek()),
							((java_cup.runtime.Symbol) CUP$Parser$stack.peek()),
							RESULT);

			addTerminal(CUP$Parser$stack, CUP$Parser$result);

		}
			break;

		/* . . . . . . . . . . . . . . . . . . . . */
		case 33: // else ::= ELSE
		{
			Object RESULT = null;
			System.out.println("else ::= ELSE");
			CUP$Parser$result = parser
					.getSymbolFactory()
					.newSymbol(
							"else",
							17,
							((java_cup.runtime.Symbol) CUP$Parser$stack.peek()),
							((java_cup.runtime.Symbol) CUP$Parser$stack.peek()),
							RESULT);

			addTerminal(CUP$Parser$stack, CUP$Parser$result);

		}
			break;

		/* . . . . . . . . . . . . . . . . . . . . */
		case 34: // repeat ::= REPEAT
		{
			Object RESULT = null;
			System.out.println("repeat ::= REPEAT");
			CUP$Parser$result = parser
					.getSymbolFactory()
					.newSymbol(
							"repeat",
							18,
							((java_cup.runtime.Symbol) CUP$Parser$stack.peek()),
							((java_cup.runtime.Symbol) CUP$Parser$stack.peek()),
							RESULT);

			addTerminal(CUP$Parser$stack, CUP$Parser$result);

		}
			break;

		/* . . . . . . . . . . . . . . . . . . . . */
		case 35: // until ::= UNTIL
		{
			Object RESULT = null;
			System.out.println("until ::= UNTIL");
			CUP$Parser$result = parser
					.getSymbolFactory()
					.newSymbol(
							"until",
							19,
							((java_cup.runtime.Symbol) CUP$Parser$stack.peek()),
							((java_cup.runtime.Symbol) CUP$Parser$stack.peek()),
							RESULT);

			addTerminal(CUP$Parser$stack, CUP$Parser$result);

		}
			break;

		/* . . . . . . . . . . . . . . . . . . . . */
		case 36: // id ::= ID
		{
			Object RESULT = null;
			System.out.println("id ::= ID");
			CUP$Parser$result = parser
					.getSymbolFactory()
					.newSymbol(
							"id",
							20,
							((java_cup.runtime.Symbol) CUP$Parser$stack.peek()),
							((java_cup.runtime.Symbol) CUP$Parser$stack.peek()),
							RESULT);

			addTerminal(CUP$Parser$stack, CUP$Parser$result);

		}
			break;

		/* . . . . . . . . . . . . . . . . . . . . */
		case 37: // op_atribb ::= OP_ATRIB
		{
			Object RESULT = null;
			System.out.println("op_atribb ::= OP_ATRIB");
			CUP$Parser$result = parser
					.getSymbolFactory()
					.newSymbol(
							"op_atribb",
							21,
							((java_cup.runtime.Symbol) CUP$Parser$stack.peek()),
							((java_cup.runtime.Symbol) CUP$Parser$stack.peek()),
							RESULT);

			addTerminal(CUP$Parser$stack, CUP$Parser$result);

		}
			break;

		/* . . . . . . . . . . . . . . . . . . . . */
		case 38: // read ::= READ
		{
			Object RESULT = null;
			System.out.println("read ::= READ");
			CUP$Parser$result = parser
					.getSymbolFactory()
					.newSymbol(
							"read",
							22,
							((java_cup.runtime.Symbol) CUP$Parser$stack.peek()),
							((java_cup.runtime.Symbol) CUP$Parser$stack.peek()),
							RESULT);

			addTerminal(CUP$Parser$stack, CUP$Parser$result);

		}
			break;

		/* . . . . . . . . . . . . . . . . . . . . */
		case 39: // write ::= WRITE
		{
			Object RESULT = null;
			System.out.println("write ::= WRITE");
			CUP$Parser$result = parser
					.getSymbolFactory()
					.newSymbol(
							"write",
							23,
							((java_cup.runtime.Symbol) CUP$Parser$stack.peek()),
							((java_cup.runtime.Symbol) CUP$Parser$stack.peek()),
							RESULT);

			addTerminal(CUP$Parser$stack, CUP$Parser$result);

		}
			break;

		/* . . . . . . . . . . . . . . . . . . . . */
		case 40: // number ::= NUMBER
		{
			Integer RESULT = null;
			System.out.println("number ::= NUMBER");
			CUP$Parser$result = parser
					.getSymbolFactory()
					.newSymbol(
							"number",
							27,
							((java_cup.runtime.Symbol) CUP$Parser$stack.peek()),
							((java_cup.runtime.Symbol) CUP$Parser$stack.peek()),
							RESULT);

			addTerminal(CUP$Parser$stack, CUP$Parser$result);

		}
			break;

		/* . . . . . . . . . . . . . . . . . . . . */
		case 41: // lparen ::= LPAREN
		{
			Object RESULT = null;
			System.out.println("lparen ::= LPAREN");
			CUP$Parser$result = parser
					.getSymbolFactory()
					.newSymbol(
							"lparen",
							24,
							((java_cup.runtime.Symbol) CUP$Parser$stack.peek()),
							((java_cup.runtime.Symbol) CUP$Parser$stack.peek()),
							RESULT);

			addTerminal(CUP$Parser$stack, CUP$Parser$result);

		}
			break;

		/* . . . . . . . . . . . . . . . . . . . . */
		case 42: // rparen ::= RPAREN
		{
			Object RESULT = null;
			System.out.println("rparen ::= RPAREN");
			CUP$Parser$result = parser
					.getSymbolFactory()
					.newSymbol(
							"rparen",
							25,
							((java_cup.runtime.Symbol) CUP$Parser$stack.peek()),
							((java_cup.runtime.Symbol) CUP$Parser$stack.peek()),
							RESULT);

			addTerminal(CUP$Parser$stack, CUP$Parser$result);

		}
			break;

		/* . . . . . . */
		default:
			throw new Exception("Invalid action number " + CUP$Parser$act_num
					+ "found in internal parse table");

		}

		visualizarStack();

		return CUP$Parser$result;

	} /* end of method */

	private void addNonTerminal(java_cup.runtime.Symbol CUP$Parser$result,
			int childs) {

		DefaultMutableTreeNode node = newNode(CUP$Parser$result);

		int y = childs;

		int z = stackNodes.size();

		while (childs > 0) {

			node.add((MutableTreeNode) stackNodes.toArray()[z - childs]);

			childs--;

		}

		while (y > 0) {

			stackNodes.pop();

			y--;

		}

		stackNodes.push(node);

	}

	private void addTerminal(java.util.Stack CUP$Parser$stack,
			java_cup.runtime.Symbol CUP$Parser$result) {

		DefaultMutableTreeNode node = newNode(CUP$Parser$result);

		node.add(newNode((java_cup.runtime.Symbol) CUP$Parser$stack.peek()));

		stackNodes.push(node);

	}

	private DefaultMutableTreeNode newNode(
			java_cup.runtime.Symbol CUP$Parser$result) {

		return new DefaultMutableTreeNode(nodeName(CUP$Parser$result));

	}

	private String nodeName(java_cup.runtime.Symbol CUP$Parser$result) {

		return CUP$Parser$result.toString().split("Symbol: ")[1];

	}

	private void visualizarStack() {
		System.out.println("\nStack:\t");
		for (Object obj : stackNodes.toArray()) {

			System.out.print(((DefaultMutableTreeNode) obj).toString() + " | ");

		}
		System.out
				.println("\n---------------------------------------------------------------------------\n");
	}

	/** Method splitting the generated action code into several parts. */
	public final java_cup.runtime.Symbol CUP$Parser$do_action(
			int CUP$Parser$act_num,
			java_cup.runtime.lr_parser CUP$Parser$parser,
			java.util.Stack CUP$Parser$stack, int CUP$Parser$top)
			throws java.lang.Exception {
		return CUP$Parser$do_action_part00000000(CUP$Parser$act_num,
				CUP$Parser$parser, CUP$Parser$stack, CUP$Parser$top);
	}
}
