//----------------------------------------------------
// The following code was generated by CUP v0.11b beta 20140220
// Fri May 09 00:13:24 BRT 2014
//----------------------------------------------------

package "";

import java.io.File;
import java.io.FileInputStream;
import java.util.Stack;

import javax.swing.tree.DefaultMutableTreeNode;

import java_cup.runtime.ComplexSymbolFactory;
import java_cup.runtime.SymbolFactory;
import java_cup.runtime.ComplexSymbolFactory.Location;

/**
 * CUP v0.11b beta 20140220 generated parser.
 * 
 * @version Fri May 09 00:13:24 BRT 2014
 */
public class Parser_old extends java_cup.runtime.lr_parser {

	/** Default constructor. */
	public Parser_old() {
		super();
	}

	/** Constructor which sets the default scanner. */
	public Parser_old(java_cup.runtime.Scanner s) {
		super(s);
	}

	/** Constructor which sets the default scanner. */
	public Parser_old(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {
		super(s, sf);
	}

	private DefaultMutableTreeNode tree;

	public DefaultMutableTreeNode getTree() {
		return tree.toTreeNode();
	}

	public void setTree(DefaultMutableTreeNode tree) {
		this.tree = tree;
	}

	/** Production table. */
	protected static final short _production_table[][] = unpackFromStrings(new String[] { "\000\036\000\002\002\003\000\002\002\004\000\002\003"
			+ "\004\000\002\003\003\000\002\004\003\000\002\004\003"
			+ "\000\002\004\003\000\002\004\003\000\002\004\003\000"
			+ "\002\005\010\000\002\005\012\000\002\006\007\000\002"
			+ "\007\006\000\002\010\005\000\002\011\005\000\002\012"
			+ "\005\000\002\012\003\000\002\015\003\000\002\015\003"
			+ "\000\002\013\005\000\002\013\003\000\002\016\003\000"
			+ "\002\016\003\000\002\014\005\000\002\014\003\000\002"
			+ "\017\003\000\002\017\003\000\002\020\005\000\002\020"
			+ "\003\000\002\020\003" });

	/** Access to production table. */
	public short[][] production_table() {
		return _production_table;
	}

	/** Parse-action table. */
	protected static final short[][] _action_table = unpackFromStrings(new String[] { "\000\070\000\014\004\012\010\006\012\005\013\016\014"
			+ "\015\001\002\000\004\002\072\001\002\000\004\014\070"
			+ "\001\002\000\014\004\012\010\006\012\005\013\016\014"
			+ "\015\001\002\000\024\002\ufffd\004\ufffd\006\ufffd\007\ufffd"
			+ "\010\ufffd\011\ufffd\012\ufffd\013\ufffd\014\ufffd\001\002\000"
			+ "\024\002\ufff9\004\ufff9\006\ufff9\007\ufff9\010\ufff9\011\ufff9"
			+ "\012\ufff9\013\ufff9\014\ufff9\001\002\000\016\002\001\004"
			+ "\012\010\006\012\005\013\016\014\015\001\002\000\010"
			+ "\014\021\024\026\027\024\001\002\000\024\002\ufffb\004"
			+ "\ufffb\006\ufffb\007\ufffb\010\ufffb\011\ufffb\012\ufffb\013\ufffb"
			+ "\014\ufffb\001\002\000\024\002\ufffe\004\ufffe\006\ufffe\007"
			+ "\ufffe\010\ufffe\011\ufffe\012\ufffe\013\ufffe\014\ufffe\001\002"
			+ "\000\004\023\047\001\002\000\010\014\021\024\026\027"
			+ "\024\001\002\000\024\002\ufffc\004\ufffc\006\ufffc\007\ufffc"
			+ "\010\ufffc\011\ufffc\012\ufffc\013\ufffc\014\ufffc\001\002\000"
			+ "\024\002\ufffa\004\ufffa\006\ufffa\007\ufffa\010\ufffa\011\ufffa"
			+ "\012\ufffa\013\ufffa\014\ufffa\001\002\000\024\005\uffe4\015"
			+ "\uffe4\016\uffe4\017\uffe4\020\uffe4\021\uffe4\022\uffe4\025\uffe4"
			+ "\026\uffe4\001\002\000\024\005\uffe9\015\uffe9\016\uffe9\017"
			+ "\uffe9\020\uffe9\021\uffe9\022\uffe9\025\uffe9\026\uffe9\001\002"
			+ "\000\024\005\uffed\015\uffed\016\uffed\017\043\020\045\021"
			+ "\uffed\022\uffed\025\uffed\026\uffed\001\002\000\024\005\uffe5"
			+ "\015\uffe5\016\uffe5\017\uffe5\020\uffe5\021\uffe5\022\uffe5\025"
			+ "\uffe5\026\uffe5\001\002\000\020\005\ufff1\015\034\016\040"
			+ "\021\037\022\035\025\ufff1\026\ufff1\001\002\000\010\014"
			+ "\021\024\026\027\024\001\002\000\004\026\030\001\002"
			+ "\000\024\002\ufff3\004\ufff3\006\ufff3\007\ufff3\010\ufff3\011"
			+ "\ufff3\012\ufff3\013\ufff3\014\ufff3\001\002\000\004\025\032"
			+ "\001\002\000\024\005\uffe6\015\uffe6\016\uffe6\017\uffe6\020"
			+ "\uffe6\021\uffe6\022\uffe6\025\uffe6\026\uffe6\001\002\000\010"
			+ "\014\021\024\026\027\024\001\002\000\010\014\uffec\024"
			+ "\uffec\027\uffec\001\002\000\010\014\ufff0\024\ufff0\027\ufff0"
			+ "\001\002\000\010\014\021\024\026\027\024\001\002\000"
			+ "\010\014\uffef\024\uffef\027\uffef\001\002\000\010\014\uffeb"
			+ "\024\uffeb\027\uffeb\001\002\000\014\005\ufff2\015\034\016"
			+ "\040\025\ufff2\026\ufff2\001\002\000\020\005\uffee\015\034"
			+ "\016\040\021\uffee\022\uffee\025\uffee\026\uffee\001\002\000"
			+ "\010\014\uffe8\024\uffe8\027\uffe8\001\002\000\010\014\021"
			+ "\024\026\027\024\001\002\000\010\014\uffe7\024\uffe7\027"
			+ "\uffe7\001\002\000\024\005\uffea\015\uffea\016\uffea\017\uffea"
			+ "\020\uffea\021\uffea\022\uffea\025\uffea\026\uffea\001\002\000"
			+ "\010\014\021\024\026\027\024\001\002\000\004\026\051"
			+ "\001\002\000\024\002\ufff5\004\ufff5\006\ufff5\007\ufff5\010"
			+ "\ufff5\011\ufff5\012\ufff5\013\ufff5\014\ufff5\001\002\000\004"
			+ "\005\053\001\002\000\014\004\012\010\006\012\005\013"
			+ "\016\014\015\001\002\000\020\004\012\006\056\007\057"
			+ "\010\006\012\005\013\016\014\015\001\002\000\024\002"
			+ "\uffff\004\uffff\006\uffff\007\uffff\010\uffff\011\uffff\012\uffff"
			+ "\013\uffff\014\uffff\001\002\000\014\004\012\010\006\012"
			+ "\005\013\016\014\015\001\002\000\004\026\060\001\002"
			+ "\000\024\002\ufff8\004\ufff8\006\ufff8\007\ufff8\010\ufff8\011"
			+ "\ufff8\012\ufff8\013\ufff8\014\ufff8\001\002\000\016\004\012"
			+ "\007\062\010\006\012\005\013\016\014\015\001\002\000"
			+ "\004\026\063\001\002\000\024\002\ufff7\004\ufff7\006\ufff7"
			+ "\007\ufff7\010\ufff7\011\ufff7\012\ufff7\013\ufff7\014\ufff7\001"
			+ "\002\000\016\004\012\010\006\011\065\012\005\013\016"
			+ "\014\015\001\002\000\010\014\021\024\026\027\024\001"
			+ "\002\000\004\026\067\001\002\000\024\002\ufff6\004\ufff6"
			+ "\006\ufff6\007\ufff6\010\ufff6\011\ufff6\012\ufff6\013\ufff6\014"
			+ "\ufff6\001\002\000\004\026\071\001\002\000\024\002\ufff4"
			+ "\004\ufff4\006\ufff4\007\ufff4\010\ufff4\011\ufff4\012\ufff4\013"
			+ "\ufff4\014\ufff4\001\002\000\004\002\000\001\002" });

	/** Access to parse-action table. */
	public short[][] action_table() {
		return _action_table;
	}

	/** <code>reduce_goto</code> table. */
	protected static final short[][] _reduce_table = unpackFromStrings(new String[] { "\000\070\000\022\002\003\003\010\004\013\005\006\006"
			+ "\016\007\012\010\017\011\007\001\001\000\002\001\001"
			+ "\000\002\001\001\000\020\003\063\004\013\005\006\006"
			+ "\016\007\012\010\017\011\007\001\001\000\002\001\001"
			+ "\000\002\001\001\000\016\004\054\005\006\006\016\007"
			+ "\012\010\017\011\007\001\001\000\012\012\051\013\024"
			+ "\014\022\020\021\001\001\000\002\001\001\000\002\001"
			+ "\001\000\002\001\001\000\012\012\026\013\024\014\022"
			+ "\020\021\001\001\000\002\001\001\000\002\001\001\000"
			+ "\002\001\001\000\002\001\001\000\004\017\043\001\001"
			+ "\000\002\001\001\000\006\015\035\016\032\001\001\000"
			+ "\012\012\030\013\024\014\022\020\021\001\001\000\002"
			+ "\001\001\000\002\001\001\000\002\001\001\000\002\001"
			+ "\001\000\010\013\041\014\022\020\021\001\001\000\002"
			+ "\001\001\000\002\001\001\000\010\013\040\014\022\020"
			+ "\021\001\001\000\002\001\001\000\002\001\001\000\004"
			+ "\016\032\001\001\000\004\016\032\001\001\000\002\001"
			+ "\001\000\004\020\045\001\001\000\002\001\001\000\002"
			+ "\001\001\000\012\012\047\013\024\014\022\020\021\001"
			+ "\001\000\002\001\001\000\002\001\001\000\002\001\001"
			+ "\000\020\003\053\004\013\005\006\006\016\007\012\010"
			+ "\017\011\007\001\001\000\016\004\054\005\006\006\016"
			+ "\007\012\010\017\011\007\001\001\000\002\001\001\000"
			+ "\020\003\060\004\013\005\006\006\016\007\012\010\017"
			+ "\011\007\001\001\000\002\001\001\000\002\001\001\000"
			+ "\016\004\054\005\006\006\016\007\012\010\017\011\007"
			+ "\001\001\000\002\001\001\000\002\001\001\000\016\004"
			+ "\054\005\006\006\016\007\012\010\017\011\007\001\001"
			+ "\000\012\012\065\013\024\014\022\020\021\001\001\000"
			+ "\002\001\001\000\002\001\001\000\002\001\001\000\002"
			+ "\001\001\000\002\001\001" });

	/** Access to <code>reduce_goto</code> table. */
	public short[][] reduce_table() {
		return _reduce_table;
	}

	/** Instance of action encapsulation class. */
	protected CUP$Parser$actions action_obj;

	/** Action encapsulation object initializer. */
	protected void init_actions() {
		action_obj = new CUP$Parser$actions(this);
	}

	/** Invoke a user supplied parse action. */
	public java_cup.runtime.Symbol do_action(int act_num,
			java_cup.runtime.lr_parser parser, java.util.Stack stack, int top)
			throws java.lang.Exception {
		/* call code in generated class */
		return action_obj.CUP$Parser$do_action(act_num, parser, stack, top);
	}

	/** Indicates start state. */
	public int start_state() {
		return 0;
	}

	/** Indicates start production. */
	public int start_production() {
		return 1;
	}

	/** <code>EOF</code> Symbol index. */
	public int EOF_sym() {
		return 0;
	}

	/** <code>error</code> Symbol index. */
	public int error_sym() {
		return 1;
	}

	public static DefaultMutableTreeNode main(String args[]) throws Exception {
		File file = new File("src/oficial/programasEmTiny/lerEntrada.tiny");

		SymbolFactory sf = new ComplexSymbolFactory();

		Parser parser;

		if (args.length == 0) {

			parser = new Parser(new Scanner(new FileInputStream(file), sf), sf);

		} else {

			parser = new Parser(new Scanner(
					new java.io.FileInputStream(args[0]), sf), sf);
		}

		parser.parse();

		return parser.getTree();

	}

}

/** Cup generated class to encapsulate user supplied action code. */
class CUP$Parser$actions_old {
	private final Parser parser;
	private Stack<Node> stackNodes = new Stack<Node>();

	/** Constructor */
	CUP$Parser$actions(Parser parser) {
		this.parser = parser;
	}

	/** Method 0 with the actual generated action code for actions 0 to 300. */
	public final java_cup.runtime.Symbol CUP$Parser$do_action_part00000000(
			int CUP$Parser$act_num,
			java_cup.runtime.lr_parser CUP$Parser$parser,
			java.util.Stack CUP$Parser$stack, int CUP$Parser$top)
			throws java.lang.Exception {
		/* Symbol object for return from actions */
		java_cup.runtime.Symbol CUP$Parser$result;

		/* select the action based on the action number */
		switch (CUP$Parser$act_num) {
		/* . . . . . . . . . . . . . . . . . . . . */
		case 0: // programa ::= sequencia_sent
		{
			Object RESULT = null;
			System.out.println("programa ::= sequencia_sent");
			CUP$Parser$result = parser
					.getSymbolFactory()
					.newSymbol(
							"programa",
							0,
							((java_cup.runtime.Symbol) CUP$Parser$stack.peek()),
							((java_cup.runtime.Symbol) CUP$Parser$stack.peek()),
							RESULT);

			Node node = new Node("programa");

			node.getChilds().put(0, stackNodes.pop());

			parser.setTree(node);

			visualizarStack();

		}
			return CUP$Parser$result;

			/* . . . . . . . . . . . . . . . . . . . . */
		case 1: // $START ::= programa EOF
		{
			Object RESULT = null;
			Location start_valxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol) CUP$Parser$stack
					.elementAt(CUP$Parser$top - 1)).xleft;
			Location start_valxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol) CUP$Parser$stack
					.elementAt(CUP$Parser$top - 1)).xright;
			Object start_val = (Object) ((java_cup.runtime.Symbol) CUP$Parser$stack
					.elementAt(CUP$Parser$top - 1)).value;
			RESULT = start_val;
			CUP$Parser$result = parser
					.getSymbolFactory()
					.newSymbol(
							"$START",
							0,
							((java_cup.runtime.Symbol) CUP$Parser$stack
									.elementAt(CUP$Parser$top - 1)),
							((java_cup.runtime.Symbol) CUP$Parser$stack.peek()),
							RESULT);
		}
			/* ACCEPT */
			CUP$Parser$parser.done_parsing();
			return CUP$Parser$result;

			/* . . . . . . . . . . . . . . . . . . . . */
		case 2: // sequencia_sent ::= sequencia_sent sent
		{
			Object RESULT = null;
			System.out.println("sequencia_sent ::= sequencia_sent sent");
			CUP$Parser$result = parser
					.getSymbolFactory()
					.newSymbol(
							"sequencia_sent",
							1,
							((java_cup.runtime.Symbol) CUP$Parser$stack
									.elementAt(CUP$Parser$top - 1)),
							((java_cup.runtime.Symbol) CUP$Parser$stack.peek()),
							RESULT);

			Node node = new Node("sequencia_sent");

			// sequencia_sent
			node.getChilds().put(0, stackNodes.pop());
			// sent
			node.getChilds().put(1, stackNodes.pop());

			stackNodes.push(node);

			visualizarStack();

		}
			return CUP$Parser$result;

			/* . . . . . . . . . . . . . . . . . . . . */
		case 3: // sequencia_sent ::= sent
		{
			Object RESULT = null;
			System.out.println("sequencia_sent ::= sent");
			CUP$Parser$result = parser
					.getSymbolFactory()
					.newSymbol(
							"sequencia_sent",
							1,
							((java_cup.runtime.Symbol) CUP$Parser$stack.peek()),
							((java_cup.runtime.Symbol) CUP$Parser$stack.peek()),
							RESULT);

			Node node = new Node("sequencia_sent");

			// sent
			node.getChilds().put(0, stackNodes.pop());

			stackNodes.push(node);

			visualizarStack();

		}
			return CUP$Parser$result;

			/* . . . . . . . . . . . . . . . . . . . . */
		case 4: // sent ::= sent_if
		{
			Object RESULT = null;
			System.out.println("sent ::= sent_if");
			CUP$Parser$result = parser
					.getSymbolFactory()
					.newSymbol(
							"sent",
							2,
							((java_cup.runtime.Symbol) CUP$Parser$stack.peek()),
							((java_cup.runtime.Symbol) CUP$Parser$stack.peek()),
							RESULT);

			Node node = new Node("sent");

			// sent_if
			node.getChilds().put(0, stackNodes.pop());

			stackNodes.push(node);

			visualizarStack();

		}
			return CUP$Parser$result;

			/* . . . . . . . . . . . . . . . . . . . . */
		case 5: // sent ::= sent_repeat
		{
			Object RESULT = null;
			System.out.println("sent ::= sent_repeat");
			CUP$Parser$result = parser
					.getSymbolFactory()
					.newSymbol(
							"sent",
							2,
							((java_cup.runtime.Symbol) CUP$Parser$stack.peek()),
							((java_cup.runtime.Symbol) CUP$Parser$stack.peek()),
							RESULT);

			Node node = new Node("sent");

			// sent_repeat
			node.getChilds().put(0, stackNodes.pop());

			stackNodes.push(node);

			visualizarStack();

		}
			return CUP$Parser$result;

			/* . . . . . . . . . . . . . . . . . . . . */
		case 6: // sent ::= sent_assign
		{
			Object RESULT = null;
			System.out.println("sent ::= sent_assign");
			CUP$Parser$result = parser
					.getSymbolFactory()
					.newSymbol(
							"sent",
							2,
							((java_cup.runtime.Symbol) CUP$Parser$stack.peek()),
							((java_cup.runtime.Symbol) CUP$Parser$stack.peek()),
							RESULT);

			Node node = new Node("sent");

			// sent_assign
			node.getChilds().put(0, stackNodes.pop());

			stackNodes.push(node);

			visualizarStack();

		}
			return CUP$Parser$result;

			/* . . . . . . . . . . . . . . . . . . . . */
		case 7: // sent ::= sent_read
		{
			Object RESULT = null;
			System.out.println("sent ::= sent_read");
			CUP$Parser$result = parser
					.getSymbolFactory()
					.newSymbol(
							"sent",
							2,
							((java_cup.runtime.Symbol) CUP$Parser$stack.peek()),
							((java_cup.runtime.Symbol) CUP$Parser$stack.peek()),
							RESULT);

			Node node = new Node("sent");

			// sent_read
			node.getChilds().put(0, stackNodes.pop());

			stackNodes.push(node);

			visualizarStack();

		}
			return CUP$Parser$result;

			/* . . . . . . . . . . . . . . . . . . . . */
		case 8: // sent ::= sent_write
		{
			Object RESULT = null;
			System.out.println("sent ::= sent_write");
			CUP$Parser$result = parser
					.getSymbolFactory()
					.newSymbol(
							"sent",
							2,
							((java_cup.runtime.Symbol) CUP$Parser$stack.peek()),
							((java_cup.runtime.Symbol) CUP$Parser$stack.peek()),
							RESULT);

			Node node = new Node("sent");

			// sent_write
			node.getChilds().put(0, stackNodes.pop());

			stackNodes.push(node);

			visualizarStack();

		}
			return CUP$Parser$result;

			/* . . . . . . . . . . . . . . . . . . . . */
		case 9: // sent_if ::= IF exp THEN sequencia_sent END SEMI
		{
			Object RESULT = null;
			System.out
					.println("sent_if ::= IF exp THEN sequencia_sent END SEMI");
			CUP$Parser$result = parser
					.getSymbolFactory()
					.newSymbol(
							"sent_if",
							3,
							((java_cup.runtime.Symbol) CUP$Parser$stack
									.elementAt(CUP$Parser$top - 5)),
							((java_cup.runtime.Symbol) CUP$Parser$stack.peek()),
							RESULT);

			Node node = new Node("sent_if");

			Node nodeIF = new Node("IF");
			nodeIF.setNodeValue(((java_cup.runtime.Symbol) CUP$Parser$stack
					.elementAt(CUP$Parser$top - 5)).toString()
					.split("Symbol: ")[1]);

			Node nodeTHEN = new Node("THEN");
			nodeTHEN.setNodeValue(((java_cup.runtime.Symbol) CUP$Parser$stack
					.elementAt(CUP$Parser$top - 3)).toString()
					.split("Symbol: ")[1]);

			Node nodeEND = new Node("END");
			nodeEND.setNodeValue(((java_cup.runtime.Symbol) CUP$Parser$stack
					.elementAt(CUP$Parser$top - 1)).toString()
					.split("Symbol: ")[1]);

			node.getChilds().put(0, nodeIF);
			// exp
			node.getChilds().put(1, stackNodes.pop());
			node.getChilds().put(2, nodeTHEN);
			// sequencia_sent
			node.getChilds().put(3, stackNodes.pop());
			node.getChilds().put(4, nodeEND);

			stackNodes.push(node);

			visualizarStack();

		}
			return CUP$Parser$result;

			/* . . . . . . . . . . . . . . . . . . . . */
		case 10: // sent_if ::= IF exp THEN sequencia_sent ELSE sequencia_sent
					// END SEMI
		{
			Object RESULT = null;
			System.out
					.println("sent_if ::= IF exp THEN sequencia_sent ELSE sequencia_sent END ;");
			CUP$Parser$result = parser
					.getSymbolFactory()
					.newSymbol(
							"sent_if",
							3,
							((java_cup.runtime.Symbol) CUP$Parser$stack
									.elementAt(CUP$Parser$top - 7)),
							((java_cup.runtime.Symbol) CUP$Parser$stack.peek()),
							RESULT);

			Node node = new Node("sent_if");

			Node nodeIF = new Node("IF");
			nodeIF.setNodeValue(((java_cup.runtime.Symbol) CUP$Parser$stack
					.elementAt(CUP$Parser$top - 7)).toString()
					.split("Symbol: ")[1]);

			Node nodeTHEN = new Node("THEN");
			nodeTHEN.setNodeValue(((java_cup.runtime.Symbol) CUP$Parser$stack
					.elementAt(CUP$Parser$top - 5)).toString()
					.split("Symbol: ")[1]);

			Node nodeELSE = new Node("ELSE");
			nodeELSE.setNodeValue(((java_cup.runtime.Symbol) CUP$Parser$stack
					.elementAt(CUP$Parser$top - 3)).toString()
					.split("Symbol: ")[1]);

			Node nodeEND = new Node("END");
			nodeEND.setNodeValue(((java_cup.runtime.Symbol) CUP$Parser$stack
					.elementAt(CUP$Parser$top - 1)).toString()
					.split("Symbol: ")[1]);

			node.getChilds().put(0, nodeIF);
			// exp
			node.getChilds().put(1, stackNodes.pop());
			node.getChilds().put(2, nodeTHEN);
			// sequencia_sent
			node.getChilds().put(3, stackNodes.pop());
			node.getChilds().put(4, nodeELSE);
			// sequencia_sent
			node.getChilds().put(5, stackNodes.pop());
			node.getChilds().put(6, nodeEND);

			stackNodes.push(node);

			visualizarStack();

		}
			return CUP$Parser$result;

			/* . . . . . . . . . . . . . . . . . . . . */
		case 11: // sent_repeat ::= REPEAT sequencia_sent UNTIL exp SEMI
		{
			Object RESULT = null;
			System.out
					.println("sent_repeat ::= REPEAT sequencia_sent UNTIL exp SEMI");
			CUP$Parser$result = parser
					.getSymbolFactory()
					.newSymbol(
							"sent_repeat",
							4,
							((java_cup.runtime.Symbol) CUP$Parser$stack
									.elementAt(CUP$Parser$top - 4)),
							((java_cup.runtime.Symbol) CUP$Parser$stack.peek()),
							RESULT);

			Node node = new Node("sent_repeat");

			Node nodeREPEAT = new Node("REPEAT");
			nodeREPEAT.setNodeValue(((java_cup.runtime.Symbol) CUP$Parser$stack
					.elementAt(CUP$Parser$top - 4)).toString()
					.split("Symbol: ")[1]);

			Node nodeUNTIL = new Node("UNTIL");
			nodeUNTIL.setNodeValue(((java_cup.runtime.Symbol) CUP$Parser$stack
					.elementAt(CUP$Parser$top - 2)).toString()
					.split("Symbol: ")[1]);

			node.getChilds().put(0, nodeREPEAT);
			node.getChilds().put(1, stackNodes.pop());
			node.getChilds().put(2, nodeUNTIL);
			node.getChilds().put(3, stackNodes.pop());

			stackNodes.push(node);

			visualizarStack();

		}
			return CUP$Parser$result;

			/* . . . . . . . . . . . . . . . . . . . . */
		case 12: // sent_assign ::= ID OP_ATRIB exp SEMI
		{
			Object RESULT = null;
			System.out.println("sent_assign ::= ID OP_ATRIB exp SEMI");
			CUP$Parser$result = parser
					.getSymbolFactory()
					.newSymbol(
							"sent_assign",
							5,
							((java_cup.runtime.Symbol) CUP$Parser$stack
									.elementAt(CUP$Parser$top - 3)),
							((java_cup.runtime.Symbol) CUP$Parser$stack.peek()),
							RESULT);

			Node node = new Node("sent_assign");

			Node nodeID = new Node("ID");
			nodeID.setNodeValue(((java_cup.runtime.Symbol) CUP$Parser$stack
					.elementAt(CUP$Parser$top - 3)).toString()
					.split("Symbol: ")[1]);

			Node node_OP_ATRIB = new Node("OP_ATRIB");

			node_OP_ATRIB
					.setNodeValue(((java_cup.runtime.Symbol) CUP$Parser$stack
							.elementAt(CUP$Parser$top - 2)).toString().split(
							"Symbol: ")[1]);

			node.getChilds().put(0, nodeID);
			node.getChilds().put(1, node_OP_ATRIB);
			node.getChilds().put(2, stackNodes.pop());

			stackNodes.push(node);

			visualizarStack();

		}

			return CUP$Parser$result;

			/* . . . . . . . . . . . . . . . . . . . . */
		case 13: // sent_read ::= READ ID SEMI
		{
			Object RESULT = null;
			System.out.println("sent_read ::= READ ID: \""
					+ ((java_cup.runtime.Symbol) CUP$Parser$stack
							.elementAt(CUP$Parser$top - 1)).toString().split(
							"Symbol: ")[1] + "\" SEMI");
			CUP$Parser$result = parser
					.getSymbolFactory()
					.newSymbol(
							"sent_read",
							6,
							((java_cup.runtime.Symbol) CUP$Parser$stack
									.elementAt(CUP$Parser$top - 2)),
							((java_cup.runtime.Symbol) CUP$Parser$stack.peek()),
							RESULT);

			String chilNodeNameRead = ((java_cup.runtime.Symbol) CUP$Parser$stack
					.elementAt(CUP$Parser$top - 2)).toString()
					.split("Symbol: ")[1];

			String value = ((java_cup.runtime.Symbol) CUP$Parser$stack
					.elementAt(CUP$Parser$top - 1)).toString()
					.split("Symbol: ")[1];

			Node node = new Node("sent_read");

			Node childNodeRead = new Node(chilNodeNameRead);

			childNodeRead.setNodeValue(value);

			node.getChilds().put(0, childNodeRead);

			stackNodes.push(node);

			visualizarStack();

		}
			return CUP$Parser$result;

			/* . . . . . . . . . . . . . . . . . . . . */
		case 14: // sent_write ::= WRITE exp SEMI
		{
			Object RESULT = null;
			System.out.println("sent_write ::= WRITE exp SEMI");
			CUP$Parser$result = parser
					.getSymbolFactory()
					.newSymbol(
							"sent_write",
							7,
							((java_cup.runtime.Symbol) CUP$Parser$stack
									.elementAt(CUP$Parser$top - 2)),
							((java_cup.runtime.Symbol) CUP$Parser$stack.peek()),
							RESULT);

			Node node = new Node("sent_write");

			Node nodeWrite = new Node(
					((java_cup.runtime.Symbol) CUP$Parser$stack
							.elementAt(CUP$Parser$top - 2)).toString().split(
							"Symbol: ")[1]);

			node.getChilds().put(0, nodeWrite);

			node.getChilds().put(1, stackNodes.pop());

			stackNodes.push(node);

			visualizarStack();

		}
			return CUP$Parser$result;

			/* . . . . . . . . . . . . . . . . . . . . */
		case 15: // exp ::= exp_simple op_comp exp_simple
		{
			Object RESULT = null;
			System.out.println("exp ::= exp_simple op_comp exp_simple");
			CUP$Parser$result = parser
					.getSymbolFactory()
					.newSymbol(
							"exp",
							8,
							((java_cup.runtime.Symbol) CUP$Parser$stack
									.elementAt(CUP$Parser$top - 2)),
							((java_cup.runtime.Symbol) CUP$Parser$stack.peek()),
							RESULT);

			Node node = new Node("exp");

			node.getChilds().put(0, stackNodes.pop());
			node.getChilds().put(1, stackNodes.pop());
			node.getChilds().put(2, stackNodes.pop());

			stackNodes.push(node);

			visualizarStack();

		}
			return CUP$Parser$result;

			/* . . . . . . . . . . . . . . . . . . . . */
		case 16: // exp ::= exp_simple
		{
			Object RESULT = null;
			System.out.println("exp ::= exp_simple");
			CUP$Parser$result = parser
					.getSymbolFactory()
					.newSymbol(
							"exp",
							8,
							((java_cup.runtime.Symbol) CUP$Parser$stack.peek()),
							((java_cup.runtime.Symbol) CUP$Parser$stack.peek()),
							RESULT);

			Node node = new Node("exp");

			node.getChilds().put(0, stackNodes.pop());

			stackNodes.push(node);

			visualizarStack();

		}
			return CUP$Parser$result;

			/* . . . . . . . . . . . . . . . . . . . . */
		case 17: // op_comp ::= OP_MQ
		{
			Object RESULT = null;
			System.out.println("op_comp ::= OP_MQ");
			CUP$Parser$result = parser
					.getSymbolFactory()
					.newSymbol(
							"op_comp",
							11,
							((java_cup.runtime.Symbol) CUP$Parser$stack.peek()),
							((java_cup.runtime.Symbol) CUP$Parser$stack.peek()),
							RESULT);

			Node node = new Node("op_comp");

			Node node_OP_MQ = new Node("OP_MQ");

			node_OP_MQ.setNodeValue(((java_cup.runtime.Symbol) CUP$Parser$stack
					.peek()).toString().split("Symbol: ")[1]);

			node.getChilds().put(0, node_OP_MQ);

			stackNodes.push(node);

			visualizarStack();

		}
			return CUP$Parser$result;

			/* . . . . . . . . . . . . . . . . . . . . */
		case 18: // op_comp ::= OP_IGUAL
		{
			Object RESULT = null;
			System.out.println("op_comp ::= OP_IGUAL");
			CUP$Parser$result = parser
					.getSymbolFactory()
					.newSymbol(
							"op_comp",
							11,
							((java_cup.runtime.Symbol) CUP$Parser$stack.peek()),
							((java_cup.runtime.Symbol) CUP$Parser$stack.peek()),
							RESULT);

			Node node = new Node("op_comp");

			Node node_OP_IGUAL = new Node("OP_IGUAL");

			node_OP_IGUAL
					.setNodeValue(((java_cup.runtime.Symbol) CUP$Parser$stack
							.peek()).toString().split("Symbol: ")[1]);

			node.getChilds().put(0, node_OP_IGUAL);

			stackNodes.push(node);

			visualizarStack();

		}
			return CUP$Parser$result;

			/* . . . . . . . . . . . . . . . . . . . . */
		case 19: // exp_simple ::= exp_simple op_add exp_simple
		{
			Object RESULT = null;
			System.out.println("exp_simple ::= exp_simple op_add exp_simple");
			CUP$Parser$result = parser
					.getSymbolFactory()
					.newSymbol(
							"exp_simple",
							9,
							((java_cup.runtime.Symbol) CUP$Parser$stack
									.elementAt(CUP$Parser$top - 2)),
							((java_cup.runtime.Symbol) CUP$Parser$stack.peek()),
							RESULT);

			Node node = new Node("exp_simple");

			node.getChilds().put(0, stackNodes.pop());
			node.getChilds().put(1, stackNodes.pop());
			node.getChilds().put(2, stackNodes.pop());

			stackNodes.push(node);

			visualizarStack();

		}
			return CUP$Parser$result;

			/* . . . . . . . . . . . . . . . . . . . . */
		case 20: // exp_simple ::= term
		{
			Object RESULT = null;
			System.out.println("exp_simple ::= term");
			CUP$Parser$result = parser
					.getSymbolFactory()
					.newSymbol(
							"exp_simple",
							9,
							((java_cup.runtime.Symbol) CUP$Parser$stack.peek()),
							((java_cup.runtime.Symbol) CUP$Parser$stack.peek()),
							RESULT);

			Node node = new Node("exp_simple");

			node.getChilds().put(0, stackNodes.pop());

			stackNodes.push(node);

			visualizarStack();

		}
			return CUP$Parser$result;

			/* . . . . . . . . . . . . . . . . . . . . */
		case 21: // op_add ::= OP_ADD
		{
			Object RESULT = null;
			System.out.println("op_add ::= OP_ADD");
			CUP$Parser$result = parser
					.getSymbolFactory()
					.newSymbol(
							"op_add",
							12,
							((java_cup.runtime.Symbol) CUP$Parser$stack.peek()),
							((java_cup.runtime.Symbol) CUP$Parser$stack.peek()),
							RESULT);

			Node node = new Node("op_add");

			Node node_OP_ADD = new Node("OP_ADD");

			node_OP_ADD
					.setNodeValue(((java_cup.runtime.Symbol) CUP$Parser$stack
							.peek()).toString().split("Symbol: ")[1]);

			node.getChilds().put(0, node_OP_ADD);

			stackNodes.push(node);

			visualizarStack();

		}
			return CUP$Parser$result;

			/* . . . . . . . . . . . . . . . . . . . . */
		case 22: // op_add ::= OP_SUB
		{
			Object RESULT = null;
			System.out.println("op_add ::= OP_SUB");
			CUP$Parser$result = parser
					.getSymbolFactory()
					.newSymbol(
							"op_add",
							12,
							((java_cup.runtime.Symbol) CUP$Parser$stack.peek()),
							((java_cup.runtime.Symbol) CUP$Parser$stack.peek()),
							RESULT);

			Node node = new Node("op_add");

			Node node_OP_SUB = new Node("OP_SUB");

			node_OP_SUB
					.setNodeValue(((java_cup.runtime.Symbol) CUP$Parser$stack
							.peek()).toString().split("Symbol: ")[1]);

			node.getChilds().put(0, node_OP_SUB);

			stackNodes.push(node);

			visualizarStack();

		}
			return CUP$Parser$result;

			/* . . . . . . . . . . . . . . . . . . . . */
		case 23: // term ::= term op_mult op_factor
		{
			Object RESULT = null;
			System.out.println("term ::= term op_mult op_factor");
			CUP$Parser$result = parser
					.getSymbolFactory()
					.newSymbol(
							"term",
							10,
							((java_cup.runtime.Symbol) CUP$Parser$stack
									.elementAt(CUP$Parser$top - 2)),
							((java_cup.runtime.Symbol) CUP$Parser$stack.peek()),
							RESULT);

			Node node = new Node("term");

			node.getChilds().put(0, stackNodes.pop());
			node.getChilds().put(1, stackNodes.pop());
			node.getChilds().put(2, stackNodes.pop());

			stackNodes.push(node);

			visualizarStack();

		}
			return CUP$Parser$result;

			/* . . . . . . . . . . . . . . . . . . . . */
		case 24: // term ::= op_factor
		{
			Object RESULT = null;
			System.out.println("term ::= op_factor");
			CUP$Parser$result = parser
					.getSymbolFactory()
					.newSymbol(
							"term",
							10,
							((java_cup.runtime.Symbol) CUP$Parser$stack.peek()),
							((java_cup.runtime.Symbol) CUP$Parser$stack.peek()),
							RESULT);

			Node node = new Node("term");

			node.getChilds().put(0, stackNodes.pop());

			stackNodes.push(node);

			visualizarStack();

		}
			return CUP$Parser$result;

			/* . . . . . . . . . . . . . . . . . . . . */
		case 25: // op_mult ::= OP_MULT
		{
			Object RESULT = null;
			System.out.println("op_mult ::= OP_MULT");
			CUP$Parser$result = parser
					.getSymbolFactory()
					.newSymbol(
							"op_mult",
							13,
							((java_cup.runtime.Symbol) CUP$Parser$stack.peek()),
							((java_cup.runtime.Symbol) CUP$Parser$stack.peek()),
							RESULT);

			Node node = new Node("op_mult");

			Node node_OP_MULT = new Node("OP_MULT");

			node_OP_MULT
					.setNodeValue(((java_cup.runtime.Symbol) CUP$Parser$stack
							.peek()).toString().split("Symbol: ")[1]);

			node.getChilds().put(0, node_OP_MULT);

			stackNodes.push(node);

			visualizarStack();

		}
			return CUP$Parser$result;

			/* . . . . . . . . . . . . . . . . . . . . */
		case 26: // op_mult ::= OP_QUOC
		{
			Object RESULT = null;
			System.out.println("op_mult ::= OP_QUOC");
			CUP$Parser$result = parser
					.getSymbolFactory()
					.newSymbol(
							"op_mult",
							13,
							((java_cup.runtime.Symbol) CUP$Parser$stack.peek()),
							((java_cup.runtime.Symbol) CUP$Parser$stack.peek()),
							RESULT);

			Node node = new Node("op_mult");

			Node node_OP_QUOC = new Node("OP_QUOC");

			node_OP_QUOC
					.setNodeValue(((java_cup.runtime.Symbol) CUP$Parser$stack
							.peek()).toString().split("Symbol: ")[1]);

			node.getChilds().put(0, node_OP_QUOC);

			stackNodes.push(node);

			visualizarStack();

		}
			return CUP$Parser$result;

			/* . . . . . . . . . . . . . . . . . . . . */
		case 27: // op_factor ::= LPAREN exp RPAREN
		{
			Integer RESULT = null;
			System.out.println("op_factor ::= LPAREN exp RPAREN");
			CUP$Parser$result = parser
					.getSymbolFactory()
					.newSymbol(
							"op_factor",
							14,
							((java_cup.runtime.Symbol) CUP$Parser$stack
									.elementAt(CUP$Parser$top - 2)),
							((java_cup.runtime.Symbol) CUP$Parser$stack.peek()),
							RESULT);

			Node node = new Node("op_factor");

			Node nodeLPAREN = new Node("LPAREN");
			nodeLPAREN.setNodeValue(((java_cup.runtime.Symbol) CUP$Parser$stack
					.elementAt(CUP$Parser$top - 2)).toString()
					.split("Symbol: ")[1]);

			Node nodeRPAREN = new Node("RPAREN");
			nodeRPAREN.setNodeValue(((java_cup.runtime.Symbol) CUP$Parser$stack
					.peek()).toString().split("Symbol: ")[1]);

			node.getChilds().put(0, nodeLPAREN);
			node.getChilds().put(1, stackNodes.pop());
			node.getChilds().put(2, nodeRPAREN);

			stackNodes.push(node);

			visualizarStack();

		}
			return CUP$Parser$result;

			/* . . . . . . . . . . . . . . . . . . . . */
		case 28: // op_factor ::= NUMBER
		{
			Integer RESULT = null;
			System.out.println("op_factor ::= NUMBER: \""
					+ ((java_cup.runtime.Symbol) CUP$Parser$stack.peek())
							.toString().split("Symbol: ")[1] + "\"");
			CUP$Parser$result = parser
					.getSymbolFactory()
					.newSymbol(
							"op_factor",
							14,
							((java_cup.runtime.Symbol) CUP$Parser$stack.peek()),
							((java_cup.runtime.Symbol) CUP$Parser$stack.peek()),
							RESULT);

			Node node = new Node("op_factor");

			Node nodeNUMBER = new Node("NUMBER");

			nodeNUMBER.setNodeValue(((java_cup.runtime.Symbol) CUP$Parser$stack
					.peek()).toString().split("Symbol: ")[1]);

			node.getChilds().put(0, nodeNUMBER);

			stackNodes.push(node);

			visualizarStack();

		}
			return CUP$Parser$result;

			/* . . . . . . . . . . . . . . . . . . . . */
		case 29: // op_factor ::= ID
		{
			Integer RESULT = null;
			System.out.println("op_factor ::= ID:\""
					+ ((java_cup.runtime.Symbol) CUP$Parser$stack.peek())
							.toString().split("Symbol: ")[1] + "\"");
			CUP$Parser$result = parser
					.getSymbolFactory()
					.newSymbol(
							"op_factor",
							14,
							((java_cup.runtime.Symbol) CUP$Parser$stack.peek()),
							((java_cup.runtime.Symbol) CUP$Parser$stack.peek()),
							RESULT);

			Node node = new Node("op_factor");

			Node nodeID = new Node("ID");

			nodeID.setNodeValue(((java_cup.runtime.Symbol) CUP$Parser$stack
					.peek()).toString().split("Symbol: ")[1]);

			node.getChilds().put(0, nodeID);

			stackNodes.push(node);

			visualizarStack();

		}
			return CUP$Parser$result;

			/* . . . . . . */
		default:
			throw new Exception("Invalid action number " + CUP$Parser$act_num
					+ "found in internal parse table");

		}
	} /* end of method */

	private void visualizarStack() {
		System.out.println("\nStack:\t");
		for (Object obj : stackNodes.toArray()) {

			System.out.print(((Node) obj).getNodeName() + " | ");

		}
		System.out
				.println("\n---------------------------------------------------------------------------\n");
	}

	/** Method splitting the generated action code into several parts. */
	public final java_cup.runtime.Symbol CUP$Parser$do_action(
			int CUP$Parser$act_num,
			java_cup.runtime.lr_parser CUP$Parser$parser,
			java.util.Stack CUP$Parser$stack, int CUP$Parser$top)
			throws java.lang.Exception {
		return CUP$Parser$do_action_part00000000(CUP$Parser$act_num,
				CUP$Parser$parser, CUP$Parser$stack, CUP$Parser$top);
	}
}
