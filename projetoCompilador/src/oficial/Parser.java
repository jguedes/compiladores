//----------------------------------------------------
// The following code was generated by CUP v0.11b beta 20140220
// Mon May 19 18:07:02 BRT 2014
//----------------------------------------------------

package oficial;

import java.io.File;
import java.io.FileInputStream;

import java_cup.runtime.ComplexSymbolFactory.Location;
import java_cup.runtime.Symbol;
import java_cup.runtime.SymbolFactory;

import javax.swing.tree.DefaultMutableTreeNode;

/**
 * CUP v0.11b beta 20140220 generated parser.
 * 
 * @version Mon May 19 18:07:02 BRT 2014
 */
public class Parser extends java_cup.runtime.lr_parser {

	/** Default constructor. */
	public Parser() {
		super();
	}

	/** Constructor which sets the default scanner. */
	public Parser(java_cup.runtime.Scanner s) {
		super(s);
	}

	/** Constructor which sets the default scanner. */
	public Parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {
		super(s, sf);
	}

	/** Production table. */
	protected static final short _production_table[][] = unpackFromStrings(new String[] { "\000\046\000\002\002\003\000\002\002\004\000\002\003"
			+ "\005\000\002\003\005\000\002\003\005\000\002\003\003"
			+ "\000\002\004\003\000\002\004\003\000\002\004\003\000"
			+ "\002\004\003\000\002\004\003\000\002\005\005\000\002"
			+ "\005\006\000\002\006\004\000\002\007\005\000\002\010"
			+ "\004\000\002\011\004\000\002\012\004\000\002\013\004"
			+ "\000\002\014\004\000\002\015\004\000\002\016\004\000"
			+ "\002\022\003\000\002\022\003\000\002\023\003\000\002"
			+ "\023\003\000\002\024\003\000\002\024\003\000\002\025"
			+ "\005\000\002\025\003\000\002\026\003\000\002\026\003"
			+ "\000\002\021\005\000\002\021\005\000\002\020\005\000"
			+ "\002\020\005\000\002\017\005\000\002\017\005" });

	/** Access to production table. */
	public short[][] production_table() {
		return _production_table;
	}

	/** Parse-action table. */
	protected static final short[][] _action_table = unpackFromStrings(new String[] { "\000\101\000\016\003\020\004\014\010\007\012\006\013"
			+ "\021\027\016\001\002\000\004\005\074\001\002\000\004"
			+ "\002\073\001\002\000\004\027\072\001\002\000\016\003"
			+ "\020\004\014\010\007\012\006\013\021\027\016\001\002"
			+ "\000\016\002\ufffb\003\ufffb\006\ufffb\007\ufffb\011\ufffb\025"
			+ "\ufffb\001\002\000\004\011\066\001\002\000\016\002\ufff7"
			+ "\003\ufff7\006\ufff7\007\ufff7\011\ufff7\025\ufff7\001\002\000"
			+ "\010\002\001\003\062\025\063\001\002\000\010\023\035"
			+ "\026\026\027\032\001\002\000\016\002\ufff9\003\ufff9\006"
			+ "\ufff9\007\ufff9\011\ufff9\025\ufff9\001\002\000\004\022\057"
			+ "\001\002\000\016\002\ufffc\003\ufffc\006\ufffc\007\ufffc\011"
			+ "\ufffc\025\ufffc\001\002\000\004\025\055\001\002\000\010"
			+ "\023\035\026\026\027\032\001\002\000\016\002\ufffa\003"
			+ "\ufffa\006\ufffa\007\ufffa\011\ufffa\025\ufffa\001\002\000\016"
			+ "\002\ufff8\003\ufff8\006\ufff8\007\ufff8\011\ufff8\025\ufff8\001"
			+ "\002\000\036\002\uffe6\003\uffe6\005\uffe6\006\uffe6\007\uffe6"
			+ "\011\uffe6\014\uffe6\015\uffe6\016\uffe6\017\uffe6\020\uffe6\021"
			+ "\uffe6\024\uffe6\025\uffe6\001\002\000\036\002\uffe4\003\uffe4"
			+ "\005\uffe4\006\uffe4\007\uffe4\011\uffe4\014\uffe4\015\uffe4\016"
			+ "\uffe4\017\uffe4\020\uffe4\021\uffe4\024\uffe4\025\uffe4\001\002"
			+ "\000\036\002\uffe3\003\uffe3\005\uffe3\006\uffe3\007\uffe3\011"
			+ "\uffe3\014\uffe3\015\uffe3\016\uffe3\017\uffe3\020\uffe3\021\uffe3"
			+ "\024\uffe3\025\uffe3\001\002\000\036\002\uffe8\003\uffe8\005"
			+ "\uffe8\006\uffe8\007\uffe8\011\uffe8\014\uffe8\015\uffe8\016\052"
			+ "\017\051\020\uffe8\021\uffe8\024\uffe8\025\uffe8\001\002\000"
			+ "\016\002\ufff1\003\ufff1\006\ufff1\007\ufff1\011\ufff1\025\ufff1"
			+ "\001\002\000\032\002\uffe9\003\uffe9\005\uffe9\006\uffe9\007"
			+ "\uffe9\011\uffe9\014\uffe9\015\uffe9\020\uffe9\021\uffe9\024\uffe9"
			+ "\025\uffe9\001\002\000\036\002\uffe2\003\uffe2\005\uffe2\006"
			+ "\uffe2\007\uffe2\011\uffe2\014\uffe2\015\uffe2\016\uffe2\017\uffe2"
			+ "\020\uffe2\021\uffe2\024\uffe2\025\uffe2\001\002\000\022\002"
			+ "\uffeb\003\uffeb\005\uffeb\006\uffeb\007\uffeb\011\uffeb\024\uffeb"
			+ "\025\uffeb\001\002\000\036\002\uffe7\003\uffe7\005\uffe7\006"
			+ "\uffe7\007\uffe7\011\uffe7\014\uffe7\015\uffe7\016\uffe7\017\uffe7"
			+ "\020\uffe7\021\uffe7\024\uffe7\025\uffe7\001\002\000\010\023"
			+ "\035\026\026\027\032\001\002\000\032\002\uffea\003\uffea"
			+ "\005\uffea\006\uffea\007\uffea\011\uffea\014\037\015\042\020"
			+ "\041\021\040\024\uffea\025\uffea\001\002\000\010\023\035"
			+ "\026\026\027\032\001\002\000\010\023\035\026\026\027"
			+ "\032\001\002\000\010\023\035\026\026\027\032\001\002"
			+ "\000\010\023\035\026\026\027\032\001\002\000\032\002"
			+ "\uffde\003\uffde\005\uffde\006\uffde\007\uffde\011\uffde\014\uffde"
			+ "\015\uffde\020\uffde\021\uffde\024\uffde\025\uffde\001\002\000"
			+ "\026\002\uffdc\003\uffdc\005\uffdc\006\uffdc\007\uffdc\011\uffdc"
			+ "\014\037\015\042\024\uffdc\025\uffdc\001\002\000\026\002"
			+ "\uffdd\003\uffdd\005\uffdd\006\uffdd\007\uffdd\011\uffdd\014\037"
			+ "\015\042\024\uffdd\025\uffdd\001\002\000\032\002\uffdf\003"
			+ "\uffdf\005\uffdf\006\uffdf\007\uffdf\011\uffdf\014\uffdf\015\uffdf"
			+ "\020\uffdf\021\uffdf\024\uffdf\025\uffdf\001\002\000\004\024"
			+ "\050\001\002\000\036\002\uffe5\003\uffe5\005\uffe5\006\uffe5"
			+ "\007\uffe5\011\uffe5\014\uffe5\015\uffe5\016\uffe5\017\uffe5\020"
			+ "\uffe5\021\uffe5\024\uffe5\025\uffe5\001\002\000\010\023\035"
			+ "\026\026\027\032\001\002\000\010\023\035\026\026\027"
			+ "\032\001\002\000\036\002\uffe1\003\uffe1\005\uffe1\006\uffe1"
			+ "\007\uffe1\011\uffe1\014\uffe1\015\uffe1\016\uffe1\017\uffe1\020"
			+ "\uffe1\021\uffe1\024\uffe1\025\uffe1\001\002\000\036\002\uffe0"
			+ "\003\uffe0\005\uffe0\006\uffe0\007\uffe0\011\uffe0\014\uffe0\015"
			+ "\uffe0\016\uffe0\017\uffe0\020\uffe0\021\uffe0\024\uffe0\025\uffe0"
			+ "\001\002\000\014\004\014\010\007\012\006\013\021\027"
			+ "\016\001\002\000\016\002\ufffd\003\ufffd\006\ufffd\007\ufffd"
			+ "\011\ufffd\025\ufffd\001\002\000\010\023\035\026\026\027"
			+ "\032\001\002\000\016\002\ufff3\003\ufff3\006\ufff3\007\ufff3"
			+ "\011\ufff3\025\ufff3\001\002\000\004\005\ufff0\001\002\000"
			+ "\014\004\014\010\007\012\006\013\021\027\016\001\002"
			+ "\000\014\004\014\010\007\012\006\013\021\027\016\001"
			+ "\002\000\016\002\uffff\003\uffff\006\uffff\007\uffff\011\uffff"
			+ "\025\uffff\001\002\000\016\002\ufffe\003\ufffe\006\ufffe\007"
			+ "\ufffe\011\ufffe\025\ufffe\001\002\000\010\023\035\026\026"
			+ "\027\032\001\002\000\016\002\ufff4\003\ufff4\006\ufff4\007"
			+ "\ufff4\011\ufff4\025\ufff4\001\002\000\016\002\uffec\003\uffec"
			+ "\006\uffec\007\uffec\011\uffec\025\uffec\001\002\000\010\003"
			+ "\062\011\uffed\025\063\001\002\000\016\002\ufff2\003\ufff2"
			+ "\006\ufff2\007\ufff2\011\ufff2\025\ufff2\001\002\000\004\002"
			+ "\000\001\002\000\016\003\020\004\014\010\007\012\006"
			+ "\013\021\027\016\001\002\000\006\006\076\007\077\001"
			+ "\002\000\016\003\020\004\014\010\007\012\006\013\021"
			+ "\027\016\001\002\000\016\002\ufff6\003\ufff6\006\ufff6\007"
			+ "\ufff6\011\ufff6\025\ufff6\001\002\000\004\007\101\001\002"
			+ "\000\016\002\ufff5\003\ufff5\006\ufff5\007\ufff5\011\ufff5\025"
			+ "\ufff5\001\002\000\010\003\062\007\uffee\025\063\001\002"
			+ "\000\012\003\062\006\uffef\007\uffef\025\063\001\002" });

	/** Access to parse-action table. */
	public short[][] action_table() {
		return _action_table;
	}

	/** <code>reduce_goto</code> table. */
	protected static final short[][] _reduce_table = unpackFromStrings(new String[] { "\000\101\000\026\002\004\003\012\004\016\005\007\006"
			+ "\021\007\014\010\022\011\011\012\003\015\010\001\001"
			+ "\000\004\013\074\001\001\000\002\001\001\000\002\001"
			+ "\001\000\024\003\070\004\016\005\007\006\021\007\014"
			+ "\010\022\011\011\012\003\015\010\001\001\000\002\001"
			+ "\001\000\004\016\066\001\001\000\002\001\001\000\002"
			+ "\001\001\000\022\017\032\020\030\021\033\022\060\023"
			+ "\035\024\026\025\023\026\024\001\001\000\002\001\001"
			+ "\000\002\001\001\000\002\001\001\000\002\001\001\000"
			+ "\022\017\032\020\030\021\033\022\027\023\035\024\026"
			+ "\025\023\026\024\001\001\000\002\001\001\000\002\001"
			+ "\001\000\002\001\001\000\002\001\001\000\002\001\001"
			+ "\000\002\001\001\000\002\001\001\000\002\001\001\000"
			+ "\002\001\001\000\002\001\001\000\002\001\001\000\022"
			+ "\017\032\020\030\021\033\022\046\023\035\024\026\025"
			+ "\023\026\024\001\001\000\002\001\001\000\016\020\030"
			+ "\021\033\023\045\024\026\025\023\026\024\001\001\000"
			+ "\016\020\030\021\033\023\044\024\026\025\023\026\024"
			+ "\001\001\000\016\020\030\021\033\023\043\024\026\025"
			+ "\023\026\024\001\001\000\016\020\030\021\033\023\042"
			+ "\024\026\025\023\026\024\001\001\000\002\001\001\000"
			+ "\002\001\001\000\002\001\001\000\002\001\001\000\002"
			+ "\001\001\000\002\001\001\000\006\025\053\026\024\001"
			+ "\001\000\006\025\052\026\024\001\001\000\002\001\001"
			+ "\000\002\001\001\000\022\004\055\005\007\006\021\007"
			+ "\014\010\022\011\011\012\003\015\010\001\001\000\002"
			+ "\001\001\000\022\017\032\020\030\021\033\022\057\023"
			+ "\035\024\026\025\023\026\024\001\001\000\002\001\001"
			+ "\000\002\001\001\000\022\004\064\005\007\006\021\007"
			+ "\014\010\022\011\011\012\003\015\010\001\001\000\022"
			+ "\004\063\005\007\006\021\007\014\010\022\011\011\012"
			+ "\003\015\010\001\001\000\002\001\001\000\002\001\001"
			+ "\000\022\017\032\020\030\021\033\022\067\023\035\024"
			+ "\026\025\023\026\024\001\001\000\002\001\001\000\002"
			+ "\001\001\000\002\001\001\000\002\001\001\000\002\001"
			+ "\001\000\024\003\102\004\016\005\007\006\021\007\014"
			+ "\010\022\011\011\012\003\015\010\001\001\000\004\014"
			+ "\077\001\001\000\024\003\101\004\016\005\007\006\021"
			+ "\007\014\010\022\011\011\012\003\015\010\001\001\000"
			+ "\002\001\001\000\002\001\001\000\002\001\001\000\002"
			+ "\001\001\000\002\001\001" });

	/** Access to <code>reduce_goto</code> table. */
	public short[][] reduce_table() {
		return _reduce_table;
	}

	/** Instance of action encapsulation class. */
	protected CUP$Parser$actions action_obj;

	/** Action encapsulation object initializer. */
	protected void init_actions() {
		action_obj = new CUP$Parser$actions(this);
	}

	/** Invoke a user supplied parse action. */
	@SuppressWarnings("rawtypes")
	public java_cup.runtime.Symbol do_action(int act_num,
			java_cup.runtime.lr_parser parser, java.util.Stack stack, int top)
			throws java.lang.Exception {
		/* call code in generated class */
		return action_obj.CUP$Parser$do_action(act_num, parser, stack, top);
	}

	/** Indicates start state. */
	public int start_state() {
		return 0;
	}

	/** Indicates start production. */
	public int start_production() {
		return 1;
	}

	/** <code>EOF</code> Symbol index. */
	public int EOF_sym() {
		return 0;
	}

	/** <code>error</code> Symbol index. */
	public int error_sym() {
		return 1;
	}

	private static DefaultMutableTreeNode tree;

	public DefaultMutableTreeNode getTree() {
		return tree;
	}

	public static void setTree(DefaultMutableTreeNode _tree) {
		tree = _tree;
	}

	public static void main(String args[]) throws Exception {
		main();
	}

	public static DefaultMutableTreeNode main() throws Exception {
		File[] file = {
				new File("src/oficial/programasEmTiny/lerEntrada.tiny"),
				new File("src/oficial/programasEmTiny/fatorial.tiny"),
				new File("src/oficial/programasEmTiny/exponencial.tiny"),
				new File(
						"src/oficial/programasEmTiny/contadorDeAlgarismos.tiny") };

		SymbolFactory sf = new MySymbolFactory();

		Parser parser = new Parser(
				new Scanner(new FileInputStream(file[1]), sf), sf);

		parser.parse();

		return parser.getTree();

	}

}

/** Cup generated class to encapsulate user supplied action code. */
class CUP$Parser$actions {
	private final Parser parser;

	/** Constructor */
	CUP$Parser$actions(Parser parser) {
		this.parser = parser;
	}

	/** Method 0 with the actual generated action code for actions 0 to 300. */
	@SuppressWarnings({ "rawtypes", "unchecked", "unused" })
	public final java_cup.runtime.Symbol CUP$Parser$do_action_part00000000(
			int CUP$Parser$act_num,
			java_cup.runtime.lr_parser CUP$Parser$parser,
			java.util.Stack CUP$Parser$stack, int CUP$Parser$top)
			throws java.lang.Exception {
		/* Symbol object for return from actions */
		java_cup.runtime.Symbol CUP$Parser$result;

		/* select the action based on the action number */
		switch (CUP$Parser$act_num) {
		/* . . . . . . . . . . . . . . . . . . . . */
		case 0: // programa ::= sequencia_sent
		{
			Object RESULT = null;

			System.out.println("programa ::= sequencia_sent");

			((MySymbolFactory) parser.getSymbolFactory()).setStackSymbol(
					CUP$Parser$stack, "sequencia_sent");

			CUP$Parser$result = parser
					.getSymbolFactory()
					.newSymbol(
							"programa",
							0,
							((java_cup.runtime.Symbol) CUP$Parser$stack.peek()),
							((java_cup.runtime.Symbol) CUP$Parser$stack.peek()),
							RESULT);
		}
			return CUP$Parser$result;

			/* . . . . . . . . . . . . . . . . . . . . */
		case 1: // $START ::= programa EOF
		{
			Object RESULT = null;

			Location start_valxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol) CUP$Parser$stack
					.elementAt(CUP$Parser$top - 1)).xleft;

			Location start_valxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol) CUP$Parser$stack
					.elementAt(CUP$Parser$top - 1)).xright;

			Object start_val = (Object) ((java_cup.runtime.Symbol) CUP$Parser$stack
					.elementAt(CUP$Parser$top - 1)).value;

			RESULT = start_val;

			CUP$Parser$result = parser
					.getSymbolFactory()
					.newSymbol(
							"$START",
							0,
							((java_cup.runtime.Symbol) CUP$Parser$stack
									.elementAt(CUP$Parser$top - 1)),
							((java_cup.runtime.Symbol) CUP$Parser$stack.peek()),
							RESULT);
		}
			/* ACCEPT */
			CUP$Parser$parser.done_parsing();
			return CUP$Parser$result;

			/* . . . . . . . . . . . . . . . . . . . . */
		case 2: // sequencia_sent ::= sequencia_sent SEMI sent
		{
			Object RESULT = null;

			System.out.println("sequencia_sent ::= sequencia_sent SEMI sent");

			((MySymbolFactory) parser.getSymbolFactory()).setStackSymbol(
					CUP$Parser$stack, "sequencia_sent SEMI sent");

			CUP$Parser$result = parser
					.getSymbolFactory()
					.newSymbol(
							"sequencia_sent",
							1,
							((java_cup.runtime.Symbol) CUP$Parser$stack
									.elementAt(CUP$Parser$top - 2)),
							((java_cup.runtime.Symbol) CUP$Parser$stack.peek()),
							RESULT);
		}
			return CUP$Parser$result;

			/* . . . . . . . . . . . . . . . . . . . . */
		case 3: // sequencia_sent ::= sequencia_sent error sent
		{
			Object RESULT = null;

			System.err.println("Era esperado ponto-e-vírgula!");

			((MySymbolFactory) parser.getSymbolFactory()).setStackSymbol(
					CUP$Parser$stack, "sequencia_sent error sent");

			CUP$Parser$result = parser
					.getSymbolFactory()
					.newSymbol(
							"sequencia_sent",
							1,
							((java_cup.runtime.Symbol) CUP$Parser$stack
									.elementAt(CUP$Parser$top - 2)),
							((java_cup.runtime.Symbol) CUP$Parser$stack.peek()),
							RESULT);
		}
			return CUP$Parser$result;

			/* . . . . . . . . . . . . . . . . . . . . */
		case 4: // sequencia_sent ::= error SEMI sent
		{
			Object RESULT = null;

			System.err.println("Era esperado sequência de sentenças!");

			((MySymbolFactory) parser.getSymbolFactory()).setStackSymbol(
					CUP$Parser$stack, "error SEMI sent");

			CUP$Parser$result = parser
					.getSymbolFactory()
					.newSymbol(
							"sequencia_sent",
							1,
							((java_cup.runtime.Symbol) CUP$Parser$stack
									.elementAt(CUP$Parser$top - 2)),
							((java_cup.runtime.Symbol) CUP$Parser$stack.peek()),
							RESULT);
		}
			return CUP$Parser$result;

			/* . . . . . . . . . . . . . . . . . . . . */
		case 5: // sequencia_sent ::= sent
		{
			Object RESULT = null;

			System.out.println("sequencia_sent ::= sent");

			((MySymbolFactory) parser.getSymbolFactory()).setStackSymbol(
					CUP$Parser$stack, "sent");

			CUP$Parser$result = parser
					.getSymbolFactory()
					.newSymbol(
							"sequencia_sent",
							1,
							((java_cup.runtime.Symbol) CUP$Parser$stack.peek()),
							((java_cup.runtime.Symbol) CUP$Parser$stack.peek()),
							RESULT);
		}
			return CUP$Parser$result;

			/* . . . . . . . . . . . . . . . . . . . . */
		case 6: // sent ::= sent_if
		{
			Object RESULT = null;

			System.out.println("sent ::= sent_if");

			((MySymbolFactory) parser.getSymbolFactory()).setStackSymbol(
					CUP$Parser$stack, "sent_if");

			CUP$Parser$result = parser
					.getSymbolFactory()
					.newSymbol(
							"sent",
							2,
							((java_cup.runtime.Symbol) CUP$Parser$stack.peek()),
							((java_cup.runtime.Symbol) CUP$Parser$stack.peek()),
							RESULT);
		}
			return CUP$Parser$result;

			/* . . . . . . . . . . . . . . . . . . . . */
		case 7: // sent ::= sent_repeat
		{
			Object RESULT = null;

			System.out.println("sent ::= sent_repeat");

			((MySymbolFactory) parser.getSymbolFactory()).setStackSymbol(
					CUP$Parser$stack, "sent_repeat");

			CUP$Parser$result = parser
					.getSymbolFactory()
					.newSymbol(
							"sent",
							2,
							((java_cup.runtime.Symbol) CUP$Parser$stack.peek()),
							((java_cup.runtime.Symbol) CUP$Parser$stack.peek()),
							RESULT);
		}
			return CUP$Parser$result;

			/* . . . . . . . . . . . . . . . . . . . . */
		case 8: // sent ::= sent_assign
		{
			Object RESULT = null;

			System.out.println("sent ::= sent_assign");

			((MySymbolFactory) parser.getSymbolFactory()).setStackSymbol(
					CUP$Parser$stack, "sent_assign");

			CUP$Parser$result = parser
					.getSymbolFactory()
					.newSymbol(
							"sent",
							2,
							((java_cup.runtime.Symbol) CUP$Parser$stack.peek()),
							((java_cup.runtime.Symbol) CUP$Parser$stack.peek()),
							RESULT);
		}
			return CUP$Parser$result;

			/* . . . . . . . . . . . . . . . . . . . . */
		case 9: // sent ::= sent_read
		{
			Object RESULT = null;

			System.out.println("sent ::= sent_read");

			((MySymbolFactory) parser.getSymbolFactory()).setStackSymbol(
					CUP$Parser$stack, "sent_read");

			CUP$Parser$result = parser
					.getSymbolFactory()
					.newSymbol(
							"sent",
							2,
							((java_cup.runtime.Symbol) CUP$Parser$stack.peek()),
							((java_cup.runtime.Symbol) CUP$Parser$stack.peek()),
							RESULT);
		}
			return CUP$Parser$result;

			/* . . . . . . . . . . . . . . . . . . . . */
		case 10: // sent ::= sent_write
		{
			Object RESULT = null;

			System.out.println("sent ::= sent_write");

			((MySymbolFactory) parser.getSymbolFactory()).setStackSymbol(
					CUP$Parser$stack, "sent_write");

			CUP$Parser$result = parser
					.getSymbolFactory()
					.newSymbol(
							"sent",
							2,
							((java_cup.runtime.Symbol) CUP$Parser$stack.peek()),
							((java_cup.runtime.Symbol) CUP$Parser$stack.peek()),
							RESULT);
		}
			return CUP$Parser$result;

			/* . . . . . . . . . . . . . . . . . . . . */
		case 11: // sent_if ::= if then END
		{
			Object RESULT = null;

			System.out.println("sent_if ::= if then END");

			((MySymbolFactory) parser.getSymbolFactory()).setStackSymbol(
					CUP$Parser$stack, "if then END");

			CUP$Parser$result = parser
					.getSymbolFactory()
					.newSymbol(
							"sent_if",
							3,
							((java_cup.runtime.Symbol) CUP$Parser$stack
									.elementAt(CUP$Parser$top - 2)),
							((java_cup.runtime.Symbol) CUP$Parser$stack.peek()),
							RESULT);
		}
			return CUP$Parser$result;

			/* . . . . . . . . . . . . . . . . . . . . */
		case 12: // sent_if ::= if then else END
		{
			Object RESULT = null;

			System.out.println("sent_if ::= if then else END");

			((MySymbolFactory) parser.getSymbolFactory()).setStackSymbol(
					CUP$Parser$stack, "if then else END");

			CUP$Parser$result = parser
					.getSymbolFactory()
					.newSymbol(
							"sent_if",
							3,
							((java_cup.runtime.Symbol) CUP$Parser$stack
									.elementAt(CUP$Parser$top - 3)),
							((java_cup.runtime.Symbol) CUP$Parser$stack.peek()),
							RESULT);
		}
			return CUP$Parser$result;

			/* . . . . . . . . . . . . . . . . . . . . */
		case 13: // sent_repeat ::= repeat until
		{
			Object RESULT = null;

			System.out
					.println("sent_repeat ::= repeat sequencia_sent until exp");

			((MySymbolFactory) parser.getSymbolFactory()).setStackSymbol(
					CUP$Parser$stack, "repeat until");

			CUP$Parser$result = parser
					.getSymbolFactory()
					.newSymbol(
							"sent_repeat",
							4,
							((java_cup.runtime.Symbol) CUP$Parser$stack
									.elementAt(CUP$Parser$top - 1)),
							((java_cup.runtime.Symbol) CUP$Parser$stack.peek()),
							RESULT);
		}
			return CUP$Parser$result;

			/* . . . . . . . . . . . . . . . . . . . . */
		case 14: // sent_assign ::= ID OP_ATRIB exp
		{
			Object RESULT = null;

			System.out.println("sent_assign ::= ID OP_ATRIB exp");

			AnaliseSemamtica
					.Sent_Assign(((java_cup.runtime.Symbol) CUP$Parser$stack
							.peek()));

			((Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 2)).value = ((Symbol) CUP$Parser$stack
					.peek()).value;

			((MySymbolFactory) parser.getSymbolFactory()).setStackSymbol(
					CUP$Parser$stack, "ID OP_ATRIB exp");

			CUP$Parser$result = parser
					.getSymbolFactory()
					.newSymbol(
							"sent_assign",
							5,
							((java_cup.runtime.Symbol) CUP$Parser$stack
									.elementAt(CUP$Parser$top - 2)),
							((java_cup.runtime.Symbol) CUP$Parser$stack.peek()),
							RESULT);
		}
			return CUP$Parser$result;

			/* . . . . . . . . . . . . . . . . . . . . */
		case 15: // sent_read ::= READ ID
		{
			Object RESULT = null;

			System.out.println("sent_read ::= READ ID");

			((MySymbolFactory) parser.getSymbolFactory()).setStackSymbol(
					CUP$Parser$stack, "READ ID");

			CUP$Parser$result = parser
					.getSymbolFactory()
					.newSymbol(
							"sent_read",
							6,
							((java_cup.runtime.Symbol) CUP$Parser$stack
									.elementAt(CUP$Parser$top - 1)),
							((java_cup.runtime.Symbol) CUP$Parser$stack.peek()),
							RESULT);
		}
			return CUP$Parser$result;

			/* . . . . . . . . . . . . . . . . . . . . */
		case 16: // sent_write ::= WRITE exp
		{
			Object RESULT = null;

			System.out.println("sent_write ::= WRITE exp");

			((MySymbolFactory) parser.getSymbolFactory()).setStackSymbol(
					CUP$Parser$stack, "WRITE exp");

			CUP$Parser$result = parser
					.getSymbolFactory()
					.newSymbol(
							"sent_write",
							7,
							((java_cup.runtime.Symbol) CUP$Parser$stack
									.elementAt(CUP$Parser$top - 1)),
							((java_cup.runtime.Symbol) CUP$Parser$stack.peek()),
							RESULT);
		}
			return CUP$Parser$result;

			/* . . . . . . . . . . . . . . . . . . . . */
		case 17: // if ::= IF exp
		{
			Object RESULT = null;

			System.out.println("if ::= IF exp");

			AnaliseSemamtica
					.NonTerminal_If(((java_cup.runtime.Symbol) CUP$Parser$stack
							.peek()));

			((MySymbolFactory) parser.getSymbolFactory()).setStackSymbol(
					CUP$Parser$stack, "IF exp");

			CUP$Parser$result = parser
					.getSymbolFactory()
					.newSymbol(
							"if",
							8,
							((java_cup.runtime.Symbol) CUP$Parser$stack
									.elementAt(CUP$Parser$top - 1)),
							((java_cup.runtime.Symbol) CUP$Parser$stack.peek()),
							RESULT);
		}
			return CUP$Parser$result;

			/* . . . . . . . . . . . . . . . . . . . . */
		case 18: // then ::= THEN sequencia_sent
		{
			Object RESULT = null;

			System.out.println("then ::= THEN sequencia_sent");

			((MySymbolFactory) parser.getSymbolFactory()).setStackSymbol(
					CUP$Parser$stack, "THEN sequencia_sent");

			CUP$Parser$result = parser
					.getSymbolFactory()
					.newSymbol(
							"then",
							9,
							((java_cup.runtime.Symbol) CUP$Parser$stack
									.elementAt(CUP$Parser$top - 1)),
							((java_cup.runtime.Symbol) CUP$Parser$stack.peek()),
							RESULT);
		}
			return CUP$Parser$result;

			/* . . . . . . . . . . . . . . . . . . . . */
		case 19: // else ::= ELSE sequencia_sent
		{
			Object RESULT = null;

			System.out.println("else ::= ELSE sequencia_sent");

			((MySymbolFactory) parser.getSymbolFactory()).setStackSymbol(
					CUP$Parser$stack, "ELSE sequencia_sent");

			CUP$Parser$result = parser
					.getSymbolFactory()
					.newSymbol(
							"else",
							10,
							((java_cup.runtime.Symbol) CUP$Parser$stack
									.elementAt(CUP$Parser$top - 1)),
							((java_cup.runtime.Symbol) CUP$Parser$stack.peek()),
							RESULT);
		}
			return CUP$Parser$result;

			/* . . . . . . . . . . . . . . . . . . . . */
		case 20: // repeat ::= REPEAT sequencia_sent
		{
			Object RESULT = null;

			System.out.println("repeat ::= REPEAT sequencia_sent");

			((MySymbolFactory) parser.getSymbolFactory()).setStackSymbol(
					CUP$Parser$stack, "REPEAT sequencia_sent");

			CUP$Parser$result = parser
					.getSymbolFactory()
					.newSymbol(
							"repeat",
							11,
							((java_cup.runtime.Symbol) CUP$Parser$stack
									.elementAt(CUP$Parser$top - 1)),
							((java_cup.runtime.Symbol) CUP$Parser$stack.peek()),
							RESULT);
		}
			return CUP$Parser$result;

			/* . . . . . . . . . . . . . . . . . . . . */
		case 21: // until ::= UNTIL exp
		{
			Object RESULT = null;

			AnaliseSemamtica
					.NonTerminal_Until(((java_cup.runtime.Symbol) CUP$Parser$stack
							.peek()));

			((MySymbolFactory) parser.getSymbolFactory()).setStackSymbol(
					CUP$Parser$stack, "UNTIL exp");

			CUP$Parser$result = parser
					.getSymbolFactory()
					.newSymbol(
							"until",
							12,
							((java_cup.runtime.Symbol) CUP$Parser$stack
									.elementAt(CUP$Parser$top - 1)),
							((java_cup.runtime.Symbol) CUP$Parser$stack.peek()),
							RESULT);
		}
			return CUP$Parser$result;

			/* . . . . . . . . . . . . . . . . . . . . */
		case 22: // exp ::= op_boolean
		{
			Object RESULT = null;

			System.out.println("exp ::= op_boolean");

			RESULT = ((Symbol) CUP$Parser$stack.peek()).value;

			((MySymbolFactory) parser.getSymbolFactory()).setStackSymbol(
					CUP$Parser$stack, "op_boolean");

			CUP$Parser$result = parser
					.getSymbolFactory()
					.newSymbol(
							"exp",
							16,
							((java_cup.runtime.Symbol) CUP$Parser$stack.peek()),
							((java_cup.runtime.Symbol) CUP$Parser$stack.peek()),
							RESULT);
		}
			return CUP$Parser$result;

			/* . . . . . . . . . . . . . . . . . . . . */
		case 23: // exp ::= exp_simple
		{
			Object RESULT = null;

			System.out.println("exp ::= exp_simple");

			RESULT = ((Symbol) CUP$Parser$stack.peek()).value;

			((MySymbolFactory) parser.getSymbolFactory()).setStackSymbol(
					CUP$Parser$stack, "exp_simple");

			CUP$Parser$result = parser
					.getSymbolFactory()
					.newSymbol(
							"exp",
							16,
							((java_cup.runtime.Symbol) CUP$Parser$stack.peek()),
							((java_cup.runtime.Symbol) CUP$Parser$stack.peek()),
							RESULT);
		}
			return CUP$Parser$result;

			/* . . . . . . . . . . . . . . . . . . . . */
		case 24: // exp_simple ::= op_add_or_sub
		{
			Object RESULT = null;

			System.out.println("exp_simple ::= op_add_or_sub");

			RESULT = ((Symbol) CUP$Parser$stack.peek()).value;

			((MySymbolFactory) parser.getSymbolFactory()).setStackSymbol(
					CUP$Parser$stack, "op_add_or_sub");

			CUP$Parser$result = parser
					.getSymbolFactory()
					.newSymbol(
							"exp_simple",
							17,
							((java_cup.runtime.Symbol) CUP$Parser$stack.peek()),
							((java_cup.runtime.Symbol) CUP$Parser$stack.peek()),
							RESULT);
		}
			return CUP$Parser$result;

			/* . . . . . . . . . . . . . . . . . . . . */
		case 25: // exp_simple ::= term
		{
			Object RESULT = null;

			System.out.println("exp_simple ::= term");

			RESULT = ((Symbol) CUP$Parser$stack.peek()).value;

			((MySymbolFactory) parser.getSymbolFactory()).setStackSymbol(
					CUP$Parser$stack, "term");

			CUP$Parser$result = parser
					.getSymbolFactory()
					.newSymbol(
							"exp_simple",
							17,
							((java_cup.runtime.Symbol) CUP$Parser$stack.peek()),
							((java_cup.runtime.Symbol) CUP$Parser$stack.peek()),
							RESULT);
		}
			return CUP$Parser$result;

			/* . . . . . . . . . . . . . . . . . . . . */
		case 26: // term ::= op_mult_or_quoc
		{
			Object RESULT = null;

			System.out.println("term ::= op_mult_or_quoc");

			RESULT = ((Symbol) CUP$Parser$stack.peek()).value;

			((MySymbolFactory) parser.getSymbolFactory()).setStackSymbol(
					CUP$Parser$stack, "op_mult_or_quoc");

			CUP$Parser$result = parser
					.getSymbolFactory()
					.newSymbol(
							"term",
							18,
							((java_cup.runtime.Symbol) CUP$Parser$stack.peek()),
							((java_cup.runtime.Symbol) CUP$Parser$stack.peek()),
							RESULT);
		}
			return CUP$Parser$result;

			/* . . . . . . . . . . . . . . . . . . . . */
		case 27: // term ::= op_factor
		{
			Object RESULT = null;

			System.out.println("term ::= op_factor");

			RESULT = ((Symbol) CUP$Parser$stack.peek()).value;

			((MySymbolFactory) parser.getSymbolFactory()).setStackSymbol(
					CUP$Parser$stack, "op_factor");

			CUP$Parser$result = parser
					.getSymbolFactory()
					.newSymbol(
							"term",
							18,
							((java_cup.runtime.Symbol) CUP$Parser$stack.peek()),
							((java_cup.runtime.Symbol) CUP$Parser$stack.peek()),
							RESULT);
		}
			return CUP$Parser$result;

			/* . . . . . . . . . . . . . . . . . . . . */
		case 28: // op_factor ::= LPAREN exp RPAREN
		{
			Object RESULT = null;

			System.out.println("op_factor ::= LPAREN exp RPAREN");

			RESULT = ((Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 1)).value;

			((MySymbolFactory) parser.getSymbolFactory()).setStackSymbol(
					CUP$Parser$stack, "LPAREN exp RPAREN");
			CUP$Parser$result = parser
					.getSymbolFactory()
					.newSymbol(
							"op_factor",
							19,
							((java_cup.runtime.Symbol) CUP$Parser$stack
									.elementAt(CUP$Parser$top - 2)),
							((java_cup.runtime.Symbol) CUP$Parser$stack.peek()),
							RESULT);
		}
			return CUP$Parser$result;

			/* . . . . . . . . . . . . . . . . . . . . */
		case 29: // op_factor ::= op_Integer
		{
			Object RESULT = null;

			System.out.println("op_factor ::= op_Integer");

			RESULT = ((Symbol) CUP$Parser$stack.peek()).value;

			((MySymbolFactory) parser.getSymbolFactory()).setStackSymbol(
					CUP$Parser$stack, "op_Integer");

			CUP$Parser$result = parser
					.getSymbolFactory()
					.newSymbol(
							"op_factor",
							19,
							((java_cup.runtime.Symbol) CUP$Parser$stack.peek()),
							((java_cup.runtime.Symbol) CUP$Parser$stack.peek()),
							RESULT);
		}
			return CUP$Parser$result;

			/* . . . . . . . . . . . . . . . . . . . . */
		case 30: // op_Integer ::= NUMBER
		{
			Integer RESULT = null;

			System.out.println("op_Integer ::= NUMBER");

			RESULT = (Integer) ((Symbol) CUP$Parser$stack.peek()).value;

			((MySymbolFactory) parser.getSymbolFactory()).setStackSymbol(
					CUP$Parser$stack, "NUMBER");

			CUP$Parser$result = parser
					.getSymbolFactory()
					.newSymbol(
							"op_Integer",
							20,
							((java_cup.runtime.Symbol) CUP$Parser$stack.peek()),
							((java_cup.runtime.Symbol) CUP$Parser$stack.peek()),
							RESULT);
		}
			return CUP$Parser$result;

			/* . . . . . . . . . . . . . . . . . . . . */
		case 31: // op_Integer ::= ID
		{
			Integer RESULT = null;

			System.out.println("op_Integer ::= ID");

			RESULT = (Integer) ((Symbol) CUP$Parser$stack.peek()).value;

			((MySymbolFactory) parser.getSymbolFactory()).setStackSymbol(
					CUP$Parser$stack, "ID");

			CUP$Parser$result = parser
					.getSymbolFactory()
					.newSymbol(
							"op_Integer",
							20,
							((java_cup.runtime.Symbol) CUP$Parser$stack.peek()),
							((java_cup.runtime.Symbol) CUP$Parser$stack.peek()),
							RESULT);
		}
			return CUP$Parser$result;

			/* . . . . . . . . . . . . . . . . . . . . */
		case 32: // op_mult_or_quoc ::= term OP_MULT op_factor
		{
			Object RESULT = null;

			System.out.println("op_mult_or_quoc ::= term OP_MULT op_factor");

			if (AnaliseSemamtica.Op_Mult_Or_Quoc(
					((Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 2)),
					((Symbol) CUP$Parser$stack.peek()))) {

				RESULT = ((Integer) ((Symbol) CUP$Parser$stack
						.elementAt(CUP$Parser$top - 2)).value)
						* ((Integer) ((Symbol) CUP$Parser$stack.peek()).value);

			}

			((MySymbolFactory) parser.getSymbolFactory()).setStackSymbol(
					CUP$Parser$stack, "term OP_MULT op_factor");

			CUP$Parser$result = parser
					.getSymbolFactory()
					.newSymbol(
							"op_mult_or_quoc",
							15,
							((java_cup.runtime.Symbol) CUP$Parser$stack
									.elementAt(CUP$Parser$top - 2)),
							((java_cup.runtime.Symbol) CUP$Parser$stack.peek()),
							RESULT);
		}
			return CUP$Parser$result;

			/* . . . . . . . . . . . . . . . . . . . . */
		case 33: // op_mult_or_quoc ::= term OP_QUOC op_factor
		{
			Object RESULT = null;

			System.out.println("op_mult_or_quoc ::= term OP_QUOC op_factor");

			if (AnaliseSemamtica.Op_Mult_Or_Quoc(
					((Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 2)),
					((Symbol) CUP$Parser$stack.peek()))) {

				RESULT = ((Integer) ((Symbol) CUP$Parser$stack
						.elementAt(CUP$Parser$top - 2)).value)
						/ ((Integer) ((Symbol) CUP$Parser$stack.peek()).value);

			}

			((MySymbolFactory) parser.getSymbolFactory()).setStackSymbol(
					CUP$Parser$stack, "term OP_QUOC op_factor");

			CUP$Parser$result = parser
					.getSymbolFactory()
					.newSymbol(
							"op_mult_or_quoc",
							15,
							((java_cup.runtime.Symbol) CUP$Parser$stack
									.elementAt(CUP$Parser$top - 2)),
							((java_cup.runtime.Symbol) CUP$Parser$stack.peek()),
							RESULT);
		}
			return CUP$Parser$result;

			/* . . . . . . . . . . . . . . . . . . . . */
		case 34: // op_add_or_sub ::= exp_simple OP_ADD exp_simple
		{
			Object RESULT = null;

			System.out
					.println("op_add_or_sub ::= exp_simple OP_ADD exp_simple");

			if (AnaliseSemamtica.Op_Add_Or_Sub(
					((Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 2)),
					((Symbol) CUP$Parser$stack.peek()))) {

				RESULT = ((Integer) ((Symbol) CUP$Parser$stack
						.elementAt(CUP$Parser$top - 2)).value)
						+ ((Integer) ((Symbol) CUP$Parser$stack.peek()).value);

			}

			((MySymbolFactory) parser.getSymbolFactory()).setStackSymbol(
					CUP$Parser$stack, "exp_simple OP_ADD exp_simple");

			CUP$Parser$result = parser
					.getSymbolFactory()
					.newSymbol(
							"op_add_or_sub",
							14,
							((java_cup.runtime.Symbol) CUP$Parser$stack
									.elementAt(CUP$Parser$top - 2)),
							((java_cup.runtime.Symbol) CUP$Parser$stack.peek()),
							RESULT);
		}
			return CUP$Parser$result;

			/* . . . . . . . . . . . . . . . . . . . . */
		case 35: // op_add_or_sub ::= exp_simple OP_SUB exp_simple
		{
			Object RESULT = null;

			System.out
					.println("op_add_or_sub ::= exp_simple OP_SUB exp_simple");

			if (AnaliseSemamtica.Op_Add_Or_Sub(
					((Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 2)),
					((Symbol) CUP$Parser$stack.peek()))) {

				RESULT = ((Integer) ((Symbol) CUP$Parser$stack
						.elementAt(CUP$Parser$top - 2)).value)
						- ((Integer) ((Symbol) CUP$Parser$stack.peek()).value);

			}

			((MySymbolFactory) parser.getSymbolFactory()).setStackSymbol(
					CUP$Parser$stack, "exp_simple OP_SUB exp_simple");
			CUP$Parser$result = parser
					.getSymbolFactory()
					.newSymbol(
							"op_add_or_sub",
							14,
							((java_cup.runtime.Symbol) CUP$Parser$stack
									.elementAt(CUP$Parser$top - 2)),
							((java_cup.runtime.Symbol) CUP$Parser$stack.peek()),
							RESULT);
		}
			return CUP$Parser$result;

			/* . . . . . . . . . . . . . . . . . . . . */
		case 36: // op_boolean ::= exp_simple OP_MQ exp_simple
		{
			Object RESULT = null;

			System.out.println("op_boolean ::= exp_simple OP_MQ exp_simple");

			if (AnaliseSemamtica.Op_Boolean(
					((Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 2)),
					((Symbol) CUP$Parser$stack.peek()))) {

				RESULT = ((Integer) ((Symbol) CUP$Parser$stack
						.elementAt(CUP$Parser$top - 2)).value) == ((Integer) ((Symbol) CUP$Parser$stack
						.peek()).value);

			}

			((MySymbolFactory) parser.getSymbolFactory()).setStackSymbol(
					CUP$Parser$stack, "exp_simple OP_MQ exp_simple");

			CUP$Parser$result = parser
					.getSymbolFactory()
					.newSymbol(
							"op_boolean",
							13,
							((java_cup.runtime.Symbol) CUP$Parser$stack
									.elementAt(CUP$Parser$top - 2)),
							((java_cup.runtime.Symbol) CUP$Parser$stack.peek()),
							RESULT);
		}
			return CUP$Parser$result;

			/* . . . . . . . . . . . . . . . . . . . . */
		case 37: // op_boolean ::= exp_simple OP_IGUAL exp_simple
		{
			Object RESULT = null;

			System.out.println("op_boolean ::= exp_simple OP_IGUAL exp_simple");

			if (AnaliseSemamtica.Op_Boolean(
					((Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top - 2)),
					((Symbol) CUP$Parser$stack.peek()))) {

				RESULT = ((Integer) ((Symbol) CUP$Parser$stack
						.elementAt(CUP$Parser$top - 2)).value) == ((Integer) ((Symbol) CUP$Parser$stack
						.peek()).value);

			}

			((MySymbolFactory) parser.getSymbolFactory()).setStackSymbol(
					CUP$Parser$stack, "exp_simple OP_IGUAL exp_simple");

			CUP$Parser$result = parser
					.getSymbolFactory()
					.newSymbol(
							"op_boolean",
							13,
							((java_cup.runtime.Symbol) CUP$Parser$stack
									.elementAt(CUP$Parser$top - 2)),
							((java_cup.runtime.Symbol) CUP$Parser$stack.peek()),
							RESULT);
		}
			return CUP$Parser$result;

			/* . . . . . . */
		default:
			throw new Exception("Invalid action number " + CUP$Parser$act_num
					+ "found in internal parse table");

		}
	} /* end of method */

	/** Method splitting the generated action code into several parts. */
	@SuppressWarnings("rawtypes")
	public final java_cup.runtime.Symbol CUP$Parser$do_action(
			int CUP$Parser$act_num,
			java_cup.runtime.lr_parser CUP$Parser$parser,
			java.util.Stack CUP$Parser$stack, int CUP$Parser$top)
			throws java.lang.Exception {
		return CUP$Parser$do_action_part00000000(CUP$Parser$act_num,
				CUP$Parser$parser, CUP$Parser$stack, CUP$Parser$top);
	}
}
