//----------------------------------------------------
// The following code was generated by CUP v0.11b beta 20140220
// Wed May 14 03:01:12 BRT 2014
//----------------------------------------------------

package oficial;

import java.io.File;
import java.io.FileInputStream;
import java.util.Stack;

import java_cup.runtime.ComplexSymbolFactory;
import java_cup.runtime.ComplexSymbolFactory.Location;
import java_cup.runtime.Symbol;
import java_cup.runtime.SymbolFactory;

import javax.swing.tree.DefaultMutableTreeNode;
import javax.swing.tree.MutableTreeNode;

/**
 * CUP v0.11b beta 20140220 generated parser.
 * 
 * @version Wed May 14 03:01:12 BRT 2014
 */
public class Parser extends java_cup.runtime.lr_parser {

	/** Default constructor. */
	public Parser() {
		super();
	}

	/** Constructor which sets the default scanner. */
	public Parser(java_cup.runtime.Scanner s) {
		super(s);
	}

	/** Constructor which sets the default scanner. */
	public Parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {
		super(s, sf);
	}

	/** Production table. */
	protected static final short _production_table[][] = unpackFromStrings(new String[] { "\000\115\000\002\002\003\000\002\002\004\000\002\002"
			+ "\003\000\002\003\004\000\002\003\003\000\002\004\003"
			+ "\000\002\004\003\000\002\004\003\000\002\004\003\000"
			+ "\002\004\003\000\002\005\010\000\002\005\010\000\002"
			+ "\005\010\000\002\005\010\000\002\005\010\000\002\005"
			+ "\010\000\002\005\010\000\002\005\012\000\002\005\012"
			+ "\000\002\005\012\000\002\005\012\000\002\005\012\000"
			+ "\002\005\012\000\002\005\012\000\002\005\012\000\002"
			+ "\005\012\000\002\006\007\000\002\006\007\000\002\006"
			+ "\007\000\002\006\007\000\002\006\007\000\002\007\006"
			+ "\000\002\007\006\000\002\007\006\000\002\007\006\000"
			+ "\002\010\005\000\002\010\005\000\002\010\005\000\002"
			+ "\011\005\000\002\011\005\000\002\011\005\000\002\011"
			+ "\005\000\002\012\005\000\002\012\003\000\002\012\005"
			+ "\000\002\013\005\000\002\013\003\000\002\013\005\000"
			+ "\002\014\005\000\002\014\003\000\002\014\005\000\002"
			+ "\035\005\000\002\035\003\000\002\035\003\000\002\035"
			+ "\005\000\002\035\005\000\002\035\005\000\002\017\003"
			+ "\000\002\017\003\000\002\016\003\000\002\016\003\000"
			+ "\002\015\003\000\002\015\003\000\002\020\003\000\002"
			+ "\021\003\000\002\022\003\000\002\023\003\000\002\024"
			+ "\003\000\002\025\003\000\002\026\003\000\002\027\003"
			+ "\000\002\030\003\000\002\031\003\000\002\036\003\000"
			+ "\002\032\003\000\002\033\003\000\002\034\003" });

	/** Access to production table. */
	public short[][] production_table() {
		return _production_table;
	}

	/** Parse-action table. */
	protected static final short[][] _action_table = unpackFromStrings(new String[] { "\000\236\000\016\003\017\004\006\010\025\012\004\013"
			+ "\007\014\010\001\002\000\006\003\uffba\014\uffba\001\002"
			+ "\000\020\002\001\003\124\004\006\010\025\012\004\013"
			+ "\007\014\010\001\002\000\012\003\uffc2\014\uffc2\024\uffc2"
			+ "\027\uffc2\001\002\000\012\003\uffb9\014\uffb9\024\uffb9\027"
			+ "\uffb9\001\002\000\030\003\uffbc\005\uffbc\015\uffbc\016\uffbc"
			+ "\017\uffbc\020\uffbc\021\uffbc\022\uffbc\023\uffbc\025\uffbc\026"
			+ "\uffbc\001\002\000\016\003\227\004\006\010\025\012\004"
			+ "\013\007\014\010\001\002\000\004\002\225\001\002\000"
			+ "\026\002\ufffb\003\ufffb\004\ufffb\006\ufffb\007\ufffb\010\ufffb"
			+ "\011\ufffb\012\ufffb\013\ufffb\014\ufffb\001\002\000\026\002"
			+ "\ufff8\003\ufff8\004\ufff8\006\ufff8\007\ufff8\010\ufff8\011\ufff8"
			+ "\012\ufff8\013\ufff8\014\ufff8\001\002\000\012\003\151\014"
			+ "\010\024\036\027\031\001\002\000\004\023\110\001\002"
			+ "\000\026\002\uffff\003\113\004\006\010\025\012\004\013"
			+ "\007\014\010\023\110\024\036\027\031\001\002\000\026"
			+ "\002\ufffc\003\ufffc\004\ufffc\006\ufffc\007\ufffc\010\ufffc\011"
			+ "\ufffc\012\ufffc\013\ufffc\014\ufffc\001\002\000\026\002\ufff9"
			+ "\003\ufff9\004\ufff9\006\ufff9\007\ufff9\010\ufff9\011\ufff9\012"
			+ "\ufff9\013\ufff9\014\ufff9\001\002\000\006\003\102\014\010"
			+ "\001\002\000\026\002\ufffa\003\ufffa\004\ufffa\006\ufffa\007"
			+ "\ufffa\010\ufffa\011\ufffa\012\ufffa\013\ufffa\014\ufffa\001\002"
			+ "\000\012\003\035\014\010\024\036\027\031\001\002\000"
			+ "\016\003\uffbe\004\uffbe\010\uffbe\012\uffbe\013\uffbe\014\uffbe"
			+ "\001\002\000\026\002\ufffd\003\ufffd\004\ufffd\006\ufffd\007"
			+ "\ufffd\010\ufffd\011\ufffd\012\ufffd\013\ufffd\014\ufffd\001\002"
			+ "\000\026\003\uffcc\005\uffcc\015\uffcc\016\uffcc\017\uffcc\020"
			+ "\uffcc\021\uffcc\022\uffcc\025\uffcc\026\uffcc\001\002\000\026"
			+ "\003\uffd0\005\uffd0\015\uffd0\016\uffd0\017\uffd0\020\uffd0\021"
			+ "\uffd0\022\uffd0\025\uffd0\026\uffd0\001\002\000\026\003\uffb8"
			+ "\005\uffb8\015\uffb8\016\uffb8\017\uffb8\020\uffb8\021\uffb8\022"
			+ "\uffb8\025\uffb8\026\uffb8\001\002\000\026\003\uffd3\005\uffd3"
			+ "\015\uffd3\016\uffd3\017\052\020\056\021\uffd3\022\uffd3\025"
			+ "\uffd3\026\uffd3\001\002\000\006\003\077\026\074\001\002"
			+ "\000\026\003\uffcd\005\uffcd\015\uffcd\016\uffcd\017\uffcd\020"
			+ "\uffcd\021\uffcd\022\uffcd\025\uffcd\026\uffcd\001\002\000\030"
			+ "\003\054\014\010\015\042\016\046\017\052\020\056\021"
			+ "\045\022\043\024\036\026\074\027\031\001\002\000\012"
			+ "\003\uffb7\014\uffb7\024\uffb7\027\uffb7\001\002\000\012\003"
			+ "\070\014\010\024\036\027\031\001\002\000\022\003\uffd6"
			+ "\005\uffd6\015\042\016\046\021\045\022\043\025\uffd6\026"
			+ "\uffd6\001\002\000\012\003\047\014\010\024\036\027\031"
			+ "\001\002\000\012\003\uffc6\014\uffc6\024\uffc6\027\uffc6\001"
			+ "\002\000\012\003\uffc4\014\uffc4\024\uffc4\027\uffc4\001\002"
			+ "\000\012\003\047\014\010\024\036\027\031\001\002\000"
			+ "\012\003\uffc3\014\uffc3\024\uffc3\027\uffc3\001\002\000\012"
			+ "\003\uffc5\014\uffc5\024\uffc5\027\uffc5\001\002\000\022\003"
			+ "\054\014\010\015\042\016\046\017\052\020\056\024\036"
			+ "\027\031\001\002\000\016\003\uffd7\005\uffd7\015\042\016"
			+ "\046\025\uffd7\026\uffd7\001\002\000\004\025\064\001\002"
			+ "\000\012\003\uffc8\014\uffc8\024\uffc8\027\uffc8\001\002\000"
			+ "\012\003\047\014\010\024\036\027\031\001\002\000\026"
			+ "\003\054\014\010\015\042\016\046\017\052\020\056\021"
			+ "\045\022\043\024\036\027\031\001\002\000\012\003\060"
			+ "\014\010\024\036\027\031\001\002\000\012\003\uffc7\014"
			+ "\uffc7\024\uffc7\027\uffc7\001\002\000\026\003\uffcf\005\uffcf"
			+ "\015\uffcf\016\uffcf\017\uffcf\020\uffcf\021\uffcf\022\uffcf\025"
			+ "\uffcf\026\uffcf\001\002\000\012\003\054\014\010\024\036"
			+ "\027\031\001\002\000\012\003\047\014\010\024\036\027"
			+ "\031\001\002\000\016\003\uffd5\005\uffd5\015\042\016\046"
			+ "\025\uffd5\026\uffd5\001\002\000\022\003\uffd2\005\uffd2\015"
			+ "\042\016\046\021\uffd2\022\uffd2\025\uffd2\026\uffd2\001\002"
			+ "\000\026\003\uffb6\005\uffb6\015\uffb6\016\uffb6\017\uffb6\020"
			+ "\uffb6\021\uffb6\022\uffb6\025\uffb6\026\uffb6\001\002\000\026"
			+ "\003\uffcb\005\uffcb\015\uffcb\016\uffcb\017\uffcb\020\uffcb\021"
			+ "\uffcb\022\uffcb\025\uffcb\026\uffcb\001\002\000\022\003\uffd4"
			+ "\005\uffd4\015\042\016\046\021\uffd4\022\uffd4\025\uffd4\026"
			+ "\uffd4\001\002\000\006\003\072\025\064\001\002\000\030"
			+ "\003\054\014\010\015\042\016\046\017\052\020\056\021"
			+ "\045\022\043\024\036\025\064\027\031\001\002\000\026"
			+ "\003\uffca\005\uffca\015\uffca\016\uffca\017\uffca\020\uffca\021"
			+ "\uffca\022\uffca\025\uffca\026\uffca\001\002\000\026\003\uffc9"
			+ "\005\uffc9\015\uffc9\016\uffc9\017\uffc9\020\uffc9\021\uffc9\022"
			+ "\uffc9\025\uffc9\026\uffc9\001\002\000\026\003\uffce\005\uffce"
			+ "\015\uffce\016\uffce\017\uffce\020\uffce\021\uffce\022\uffce\025"
			+ "\uffce\026\uffce\001\002\000\026\002\uffb5\003\uffb5\004\uffb5"
			+ "\006\uffb5\007\uffb5\010\uffb5\011\uffb5\012\uffb5\013\uffb5\014"
			+ "\uffb5\001\002\000\026\002\uffda\003\uffda\004\uffda\006\uffda"
			+ "\007\uffda\010\uffda\011\uffda\012\uffda\013\uffda\014\uffda\001"
			+ "\002\000\026\002\uffdb\003\uffdb\004\uffdb\006\uffdb\007\uffdb"
			+ "\010\uffdb\011\uffdb\012\uffdb\013\uffdb\014\uffdb\001\002\000"
			+ "\026\002\uffd8\003\uffd8\004\uffd8\006\uffd8\007\uffd8\010\uffd8"
			+ "\011\uffd8\012\uffd8\013\uffd8\014\uffd8\001\002\000\012\003"
			+ "\060\014\010\024\036\027\031\001\002\000\026\003\uffd1"
			+ "\005\uffd1\015\uffd1\016\uffd1\017\uffd1\020\uffd1\021\uffd1\022"
			+ "\uffd1\025\uffd1\026\uffd1\001\002\000\004\026\074\001\002"
			+ "\000\006\003\105\026\074\001\002\000\026\002\uffde\003"
			+ "\uffde\004\uffde\006\uffde\007\uffde\010\uffde\011\uffde\012\uffde"
			+ "\013\uffde\014\uffde\001\002\000\026\002\uffdc\003\uffdc\004"
			+ "\uffdc\006\uffdc\007\uffdc\010\uffdc\011\uffdc\012\uffdc\013\uffdc"
			+ "\014\uffdc\001\002\000\026\002\uffdd\003\uffdd\004\uffdd\006"
			+ "\uffdd\007\uffdd\010\uffdd\011\uffdd\012\uffdd\013\uffdd\014\uffdd"
			+ "\001\002\000\020\003\124\004\006\010\025\011\145\012"
			+ "\004\013\007\014\010\001\002\000\012\003\uffbb\014\uffbb"
			+ "\024\uffbb\027\uffbb\001\002\000\006\005\121\026\074\001"
			+ "\002\000\026\005\uffcc\015\uffcc\016\uffcc\017\uffcc\020\uffcc"
			+ "\021\uffcc\022\uffcc\023\110\025\uffcc\026\uffcc\001\002\000"
			+ "\040\003\113\004\006\010\025\012\004\013\007\014\010"
			+ "\015\042\016\046\017\052\020\056\021\045\022\043\023"
			+ "\110\024\036\027\031\001\002\000\012\003\054\014\010"
			+ "\024\036\027\031\001\002\000\004\026\074\001\002\000"
			+ "\026\002\uffe1\003\uffe1\004\uffe1\006\uffe1\007\uffe1\010\uffe1"
			+ "\011\uffe1\012\uffe1\013\uffe1\014\uffe1\001\002\000\010\005"
			+ "\121\025\064\026\074\001\002\000\026\002\uffd9\003\uffd9"
			+ "\004\uffd9\006\uffd9\007\uffd9\010\uffd9\011\uffd9\012\uffd9\013"
			+ "\uffd9\014\uffd9\001\002\000\016\003\uffc1\004\uffc1\010\uffc1"
			+ "\012\uffc1\013\uffc1\014\uffc1\001\002\000\016\003\124\004"
			+ "\006\010\025\012\004\013\007\014\010\001\002\000\022"
			+ "\003\124\004\006\006\125\007\127\010\025\012\004\013"
			+ "\007\014\010\001\002\000\024\003\113\004\006\010\025"
			+ "\012\004\013\007\014\010\023\110\024\036\027\031\001"
			+ "\002\000\016\003\uffbf\004\uffbf\010\uffbf\012\uffbf\013\uffbf"
			+ "\014\uffbf\001\002\000\004\026\074\001\002\000\006\003"
			+ "\uffc0\026\uffc0\001\002\000\016\003\124\004\006\010\025"
			+ "\012\004\013\007\014\010\001\002\000\026\002\ufffe\003"
			+ "\ufffe\004\ufffe\006\ufffe\007\ufffe\010\ufffe\011\ufffe\012\ufffe"
			+ "\013\ufffe\014\ufffe\001\002\000\020\003\124\004\006\007"
			+ "\127\010\025\012\004\013\007\014\010\001\002\000\004"
			+ "\026\074\001\002\000\026\002\uffef\003\uffef\004\uffef\006"
			+ "\uffef\007\uffef\010\uffef\011\uffef\012\uffef\013\uffef\014\uffef"
			+ "\001\002\000\026\002\ufff6\003\ufff6\004\ufff6\006\ufff6\007"
			+ "\ufff6\010\ufff6\011\ufff6\012\ufff6\013\ufff6\014\ufff6\001\002"
			+ "\000\012\003\140\014\010\024\036\027\031\001\002\000"
			+ "\006\003\143\026\074\001\002\000\030\003\054\014\010"
			+ "\015\042\016\046\017\052\020\056\021\045\022\043\024"
			+ "\036\026\074\027\031\001\002\000\026\002\uffe0\003\uffe0"
			+ "\004\uffe0\006\uffe0\007\uffe0\010\uffe0\011\uffe0\012\uffe0\013"
			+ "\uffe0\014\uffe0\001\002\000\026\002\uffe2\003\uffe2\004\uffe2"
			+ "\006\uffe2\007\uffe2\010\uffe2\011\uffe2\012\uffe2\013\uffe2\014"
			+ "\uffe2\001\002\000\026\002\uffdf\003\uffdf\004\uffdf\006\uffdf"
			+ "\007\uffdf\010\uffdf\011\uffdf\012\uffdf\013\uffdf\014\uffdf\001"
			+ "\002\000\012\003\054\014\010\024\036\027\031\001\002"
			+ "\000\012\003\uffbd\014\uffbd\024\uffbd\027\uffbd\001\002\000"
			+ "\004\026\074\001\002\000\026\002\uffe3\003\uffe3\004\uffe3"
			+ "\006\uffe3\007\uffe3\010\uffe3\011\uffe3\012\uffe3\013\uffe3\014"
			+ "\uffe3\001\002\000\006\003\162\005\121\001\002\000\030"
			+ "\003\054\005\121\014\010\015\042\016\046\017\052\020"
			+ "\056\021\045\022\043\024\036\027\031\001\002\000\016"
			+ "\003\124\004\006\010\025\012\004\013\007\014\010\001"
			+ "\002\000\022\003\124\004\006\006\125\007\127\010\025"
			+ "\012\004\013\007\014\010\001\002\000\004\026\074\001"
			+ "\002\000\016\003\124\004\006\010\025\012\004\013\007"
			+ "\014\010\001\002\000\020\003\124\004\006\007\127\010"
			+ "\025\012\004\013\007\014\010\001\002\000\004\026\074"
			+ "\001\002\000\026\002\uffee\003\uffee\004\uffee\006\uffee\007"
			+ "\uffee\010\uffee\011\uffee\012\uffee\013\uffee\014\uffee\001\002"
			+ "\000\026\002\ufff5\003\ufff5\004\ufff5\006\ufff5\007\ufff5\010"
			+ "\ufff5\011\ufff5\012\ufff5\013\ufff5\014\ufff5\001\002\000\016"
			+ "\003\124\004\006\010\025\012\004\013\007\014\010\001"
			+ "\002\000\016\003\165\004\006\010\025\012\004\013\007"
			+ "\014\010\001\002\000\022\003\175\004\006\006\125\007"
			+ "\127\010\025\012\004\013\007\014\010\001\002\000\030"
			+ "\003\113\004\006\006\125\007\127\010\025\012\004\013"
			+ "\007\014\010\023\110\024\036\027\031\001\002\000\004"
			+ "\026\074\001\002\000\016\003\124\004\006\010\025\012"
			+ "\004\013\007\014\010\001\002\000\020\003\124\004\006"
			+ "\007\127\010\025\012\004\013\007\014\010\001\002\000"
			+ "\004\026\074\001\002\000\026\002\uffec\003\uffec\004\uffec"
			+ "\006\uffec\007\uffec\010\uffec\011\uffec\012\uffec\013\uffec\014"
			+ "\uffec\001\002\000\026\002\ufff3\003\ufff3\004\ufff3\006\ufff3"
			+ "\007\ufff3\010\ufff3\011\ufff3\012\ufff3\013\ufff3\014\ufff3\001"
			+ "\002\000\006\003\215\026\074\001\002\000\026\003\113"
			+ "\004\006\010\025\012\004\013\007\014\010\023\110\024"
			+ "\036\026\074\027\031\001\002\000\016\003\200\004\006"
			+ "\010\025\012\004\013\007\014\010\001\002\000\020\003"
			+ "\204\004\006\007\127\010\025\012\004\013\007\014\010"
			+ "\001\002\000\026\003\113\004\006\007\127\010\025\012"
			+ "\004\013\007\014\010\023\110\024\036\027\031\001\002"
			+ "\000\004\026\074\001\002\000\026\002\uffea\003\uffea\004"
			+ "\uffea\006\uffea\007\uffea\010\uffea\011\uffea\012\uffea\013\uffea"
			+ "\014\uffea\001\002\000\006\003\207\026\074\001\002\000"
			+ "\026\003\113\004\006\010\025\012\004\013\007\014\010"
			+ "\023\110\024\036\026\074\027\031\001\002\000\026\002"
			+ "\uffe9\003\uffe9\004\uffe9\006\uffe9\007\uffe9\010\uffe9\011\uffe9"
			+ "\012\uffe9\013\uffe9\014\uffe9\001\002\000\026\002\ufff0\003"
			+ "\ufff0\004\ufff0\006\ufff0\007\ufff0\010\ufff0\011\ufff0\012\ufff0"
			+ "\013\ufff0\014\ufff0\001\002\000\026\002\uffe8\003\uffe8\004"
			+ "\uffe8\006\uffe8\007\uffe8\010\uffe8\011\uffe8\012\uffe8\013\uffe8"
			+ "\014\uffe8\001\002\000\022\003\124\004\006\007\127\010"
			+ "\025\011\145\012\004\013\007\014\010\001\002\000\026"
			+ "\002\ufff2\003\ufff2\004\ufff2\006\ufff2\007\ufff2\010\ufff2\011"
			+ "\ufff2\012\ufff2\013\ufff2\014\ufff2\001\002\000\004\026\074"
			+ "\001\002\000\026\002\uffeb\003\uffeb\004\uffeb\006\uffeb\007"
			+ "\uffeb\010\uffeb\011\uffeb\012\uffeb\013\uffeb\014\uffeb\001\002"
			+ "\000\026\002\ufff7\003\ufff7\004\ufff7\006\ufff7\007\ufff7\010"
			+ "\ufff7\011\ufff7\012\ufff7\013\ufff7\014\ufff7\001\002\000\026"
			+ "\002\ufff1\003\ufff1\004\ufff1\006\ufff1\007\ufff1\010\ufff1\011"
			+ "\ufff1\012\ufff1\013\ufff1\014\ufff1\001\002\000\022\003\124"
			+ "\004\006\006\125\007\127\010\025\012\004\013\007\014"
			+ "\010\001\002\000\004\026\074\001\002\000\016\003\124"
			+ "\004\006\010\025\012\004\013\007\014\010\001\002\000"
			+ "\020\003\124\004\006\007\127\010\025\012\004\013\007"
			+ "\014\010\001\002\000\004\026\074\001\002\000\026\002"
			+ "\uffed\003\uffed\004\uffed\006\uffed\007\uffed\010\uffed\011\uffed"
			+ "\012\uffed\013\uffed\014\uffed\001\002\000\026\002\ufff4\003"
			+ "\ufff4\004\ufff4\006\ufff4\007\ufff4\010\ufff4\011\ufff4\012\ufff4"
			+ "\013\ufff4\014\ufff4\001\002\000\004\002\000\001\002\000"
			+ "\020\003\124\004\006\010\025\011\145\012\004\013\007"
			+ "\014\010\001\002\000\026\003\113\004\006\010\025\011"
			+ "\145\012\004\013\007\014\010\023\110\024\036\027\031"
			+ "\001\002\000\012\003\054\014\010\024\036\027\031\001"
			+ "\002\000\004\026\074\001\002\000\026\002\uffe4\003\uffe4"
			+ "\004\uffe4\006\uffe4\007\uffe4\010\uffe4\011\uffe4\012\uffe4\013"
			+ "\uffe4\014\uffe4\001\002\000\012\003\235\014\010\024\036"
			+ "\027\031\001\002\000\006\003\240\026\074\001\002\000"
			+ "\030\003\054\014\010\015\042\016\046\017\052\020\056"
			+ "\021\045\022\043\024\036\026\074\027\031\001\002\000"
			+ "\026\002\uffe5\003\uffe5\004\uffe5\006\uffe5\007\uffe5\010\uffe5"
			+ "\011\uffe5\012\uffe5\013\uffe5\014\uffe5\001\002\000\026\002"
			+ "\uffe7\003\uffe7\004\uffe7\006\uffe7\007\uffe7\010\uffe7\011\uffe7"
			+ "\012\uffe7\013\uffe7\014\uffe7\001\002\000\026\002\uffe6\003"
			+ "\uffe6\004\uffe6\006\uffe6\007\uffe6\010\uffe6\011\uffe6\012\uffe6"
			+ "\013\uffe6\014\uffe6\001\002" });

	/** Access to parse-action table. */
	public short[][] action_table() {
		return _action_table;
	}

	/** <code>reduce_goto</code> table. */
	protected static final short[][] _reduce_table = unpackFromStrings(new String[] { "\000\236\000\034\002\011\003\004\004\025\005\017\006"
			+ "\012\007\022\010\020\011\013\020\014\024\010\026\015"
			+ "\030\021\031\023\001\001\000\002\001\001\000\030\004"
			+ "\130\005\017\006\012\007\022\010\020\011\013\020\014"
			+ "\024\010\026\015\030\021\031\023\001\001\000\002\001"
			+ "\001\000\002\001\001\000\002\001\001\000\032\003\225"
			+ "\004\025\005\017\006\012\007\022\010\020\011\013\020"
			+ "\014\024\010\026\015\030\021\031\023\001\001\000\002"
			+ "\001\001\000\002\001\001\000\002\001\001\000\020\012"
			+ "\147\013\037\014\031\026\026\032\036\035\027\036\033"
			+ "\001\001\000\004\027\135\001\001\000\050\003\106\004"
			+ "\025\005\017\006\012\007\022\010\020\011\013\012\110"
			+ "\013\037\014\031\020\014\024\010\026\111\027\113\030"
			+ "\021\031\023\032\036\035\027\036\033\001\001\000\002"
			+ "\001\001\000\002\001\001\000\004\026\102\001\001\000"
			+ "\002\001\001\000\020\012\032\013\037\014\031\026\026"
			+ "\032\036\035\027\036\033\001\001\000\002\001\001\000"
			+ "\002\001\001\000\002\001\001\000\002\001\001\000\002"
			+ "\001\001\000\004\017\077\001\001\000\004\034\075\001"
			+ "\001\000\002\001\001\000\030\012\050\013\037\014\031"
			+ "\015\060\016\052\017\054\026\026\032\036\034\074\035"
			+ "\027\036\033\001\001\000\002\001\001\000\020\012\066"
			+ "\013\037\014\031\026\026\032\036\035\027\036\033\001"
			+ "\001\000\006\015\043\016\040\001\001\000\016\013\065"
			+ "\014\031\026\026\032\036\035\027\036\033\001\001\000"
			+ "\002\001\001\000\002\001\001\000\016\013\047\014\031"
			+ "\026\026\032\036\035\027\036\033\001\001\000\002\001"
			+ "\001\000\002\001\001\000\024\012\050\013\037\014\031"
			+ "\016\052\017\054\026\026\032\036\035\027\036\033\001"
			+ "\001\000\004\016\040\001\001\000\004\033\064\001\001"
			+ "\000\002\001\001\000\016\013\062\014\031\026\026\032"
			+ "\036\035\027\036\033\001\001\000\026\012\050\013\037"
			+ "\014\031\015\060\016\052\017\054\026\026\032\036\035"
			+ "\027\036\033\001\001\000\012\026\026\032\036\035\056"
			+ "\036\033\001\001\000\002\001\001\000\002\001\001\000"
			+ "\020\012\050\013\037\014\031\026\026\032\036\035\027"
			+ "\036\033\001\001\000\016\013\061\014\031\026\026\032"
			+ "\036\035\027\036\033\001\001\000\004\016\040\001\001"
			+ "\000\004\016\040\001\001\000\002\001\001\000\002\001"
			+ "\001\000\004\016\040\001\001\000\004\033\072\001\001"
			+ "\000\030\012\050\013\037\014\031\015\060\016\052\017"
			+ "\054\026\026\032\036\033\070\035\027\036\033\001\001"
			+ "\000\002\001\001\000\002\001\001\000\002\001\001\000"
			+ "\002\001\001\000\002\001\001\000\002\001\001\000\002"
			+ "\001\001\000\012\026\026\032\036\035\100\036\033\001"
			+ "\001\000\002\001\001\000\004\034\105\001\001\000\004"
			+ "\034\103\001\001\000\002\001\001\000\002\001\001\000"
			+ "\002\001\001\000\032\004\130\005\017\006\012\007\022"
			+ "\010\020\011\013\020\014\024\010\025\143\026\015\030"
			+ "\021\031\023\001\001\000\002\001\001\000\006\021\121"
			+ "\034\117\001\001\000\004\027\135\001\001\000\056\003"
			+ "\106\004\025\005\017\006\012\007\022\010\020\011\013"
			+ "\012\116\013\037\014\031\015\060\016\052\017\054\020"
			+ "\014\024\010\026\111\027\113\030\021\031\023\032\036"
			+ "\035\027\036\033\001\001\000\020\012\114\013\037\014"
			+ "\031\026\026\032\036\035\027\036\033\001\001\000\004"
			+ "\034\115\001\001\000\002\001\001\000\010\021\121\033"
			+ "\064\034\117\001\001\000\002\001\001\000\002\001\001"
			+ "\000\032\003\122\004\025\005\017\006\012\007\022\010"
			+ "\020\011\013\020\014\024\010\026\015\030\021\031\023"
			+ "\001\001\000\034\004\130\005\017\006\012\007\022\010"
			+ "\020\011\013\020\014\022\125\023\127\024\010\026\015"
			+ "\030\021\031\023\001\001\000\050\003\106\004\025\005"
			+ "\017\006\012\007\022\010\020\011\013\012\110\013\037"
			+ "\014\031\020\014\024\010\026\111\027\113\030\021\031"
			+ "\023\032\036\035\027\036\033\001\001\000\002\001\001"
			+ "\000\004\034\134\001\001\000\002\001\001\000\032\003"
			+ "\131\004\025\005\017\006\012\007\022\010\020\011\013"
			+ "\020\014\024\010\026\015\030\021\031\023\001\001\000"
			+ "\002\001\001\000\032\004\130\005\017\006\012\007\022"
			+ "\010\020\011\013\020\014\022\132\024\010\026\015\030"
			+ "\021\031\023\001\001\000\004\034\133\001\001\000\002"
			+ "\001\001\000\002\001\001\000\020\012\136\013\037\014"
			+ "\031\026\026\032\036\035\027\036\033\001\001\000\004"
			+ "\034\141\001\001\000\030\012\050\013\037\014\031\015"
			+ "\060\016\052\017\054\026\026\032\036\034\140\035\027"
			+ "\036\033\001\001\000\002\001\001\000\002\001\001\000"
			+ "\002\001\001\000\020\012\145\013\037\014\031\026\026"
			+ "\032\036\035\027\036\033\001\001\000\002\001\001\000"
			+ "\004\034\146\001\001\000\002\001\001\000\004\021\162"
			+ "\001\001\000\030\012\050\013\037\014\031\015\060\016"
			+ "\052\017\054\021\151\026\026\032\036\035\027\036\033"
			+ "\001\001\000\032\003\152\004\025\005\017\006\012\007"
			+ "\022\010\020\011\013\020\014\024\010\026\015\030\021"
			+ "\031\023\001\001\000\034\004\130\005\017\006\012\007"
			+ "\022\010\020\011\013\020\014\022\153\023\154\024\010"
			+ "\026\015\030\021\031\023\001\001\000\004\034\160\001"
			+ "\001\000\032\003\155\004\025\005\017\006\012\007\022"
			+ "\010\020\011\013\020\014\024\010\026\015\030\021\031"
			+ "\023\001\001\000\032\004\130\005\017\006\012\007\022"
			+ "\010\020\011\013\020\014\022\156\024\010\026\015\030"
			+ "\021\031\023\001\001\000\004\034\157\001\001\000\002"
			+ "\001\001\000\002\001\001\000\032\003\215\004\025\005"
			+ "\017\006\012\007\022\010\020\011\013\020\014\024\010"
			+ "\026\015\030\021\031\023\001\001\000\032\003\163\004"
			+ "\025\005\017\006\012\007\022\010\020\011\013\020\014"
			+ "\024\010\026\015\030\021\031\023\001\001\000\034\004"
			+ "\130\005\017\006\012\007\022\010\020\011\013\020\014"
			+ "\022\173\023\175\024\010\026\015\030\021\031\023\001"
			+ "\001\000\054\003\106\004\025\005\017\006\012\007\022"
			+ "\010\020\011\013\012\110\013\037\014\031\020\014\022"
			+ "\165\023\166\024\010\026\111\027\113\030\021\031\023"
			+ "\032\036\035\027\036\033\001\001\000\004\034\172\001"
			+ "\001\000\032\003\167\004\025\005\017\006\012\007\022"
			+ "\010\020\011\013\020\014\024\010\026\015\030\021\031"
			+ "\023\001\001\000\032\004\130\005\017\006\012\007\022"
			+ "\010\020\011\013\020\014\022\170\024\010\026\015\030"
			+ "\021\031\023\001\001\000\004\034\171\001\001\000\002"
			+ "\001\001\000\002\001\001\000\004\034\213\001\001\000"
			+ "\052\003\207\004\025\005\017\006\012\007\022\010\020"
			+ "\011\013\012\110\013\037\014\031\020\014\024\010\026"
			+ "\111\027\113\030\021\031\023\032\036\034\210\035\027"
			+ "\036\033\001\001\000\032\003\176\004\025\005\017\006"
			+ "\012\007\022\010\020\011\013\020\014\024\010\026\015"
			+ "\030\021\031\023\001\001\000\032\004\130\005\017\006"
			+ "\012\007\022\010\020\011\013\020\014\022\202\024\010"
			+ "\026\015\030\021\031\023\001\001\000\052\003\106\004"
			+ "\025\005\017\006\012\007\022\010\020\011\013\012\110"
			+ "\013\037\014\031\020\014\022\200\024\010\026\111\027"
			+ "\113\030\021\031\023\032\036\035\027\036\033\001\001"
			+ "\000\004\034\201\001\001\000\002\001\001\000\004\034"
			+ "\205\001\001\000\052\003\106\004\025\005\017\006\012"
			+ "\007\022\010\020\011\013\012\110\013\037\014\031\020"
			+ "\014\024\010\026\111\027\113\030\021\031\023\032\036"
			+ "\034\204\035\027\036\033\001\001\000\002\001\001\000"
			+ "\002\001\001\000\002\001\001\000\034\004\130\005\017"
			+ "\006\012\007\022\010\020\011\013\020\014\022\211\024"
			+ "\010\025\143\026\015\030\021\031\023\001\001\000\002"
			+ "\001\001\000\004\034\212\001\001\000\002\001\001\000"
			+ "\002\001\001\000\002\001\001\000\034\004\130\005\017"
			+ "\006\012\007\022\010\020\011\013\020\014\022\216\023"
			+ "\217\024\010\026\015\030\021\031\023\001\001\000\004"
			+ "\034\223\001\001\000\032\003\220\004\025\005\017\006"
			+ "\012\007\022\010\020\011\013\020\014\024\010\026\015"
			+ "\030\021\031\023\001\001\000\032\004\130\005\017\006"
			+ "\012\007\022\010\020\011\013\020\014\022\221\024\010"
			+ "\026\015\030\021\031\023\001\001\000\004\034\222\001"
			+ "\001\000\002\001\001\000\002\001\001\000\002\001\001"
			+ "\000\032\004\130\005\017\006\012\007\022\010\020\011"
			+ "\013\020\014\024\010\025\232\026\015\030\021\031\023"
			+ "\001\001\000\052\003\106\004\025\005\017\006\012\007"
			+ "\022\010\020\011\013\012\110\013\037\014\031\020\014"
			+ "\024\010\025\227\026\111\027\113\030\021\031\023\032"
			+ "\036\035\027\036\033\001\001\000\020\012\230\013\037"
			+ "\014\031\026\026\032\036\035\027\036\033\001\001\000"
			+ "\004\034\231\001\001\000\002\001\001\000\020\012\233"
			+ "\013\037\014\031\026\026\032\036\035\027\036\033\001"
			+ "\001\000\004\034\236\001\001\000\030\012\050\013\037"
			+ "\014\031\015\060\016\052\017\054\026\026\032\036\034"
			+ "\235\035\027\036\033\001\001\000\002\001\001\000\002"
			+ "\001\001\000\002\001\001" });

	/** Access to <code>reduce_goto</code> table. */
	public short[][] reduce_table() {
		return _reduce_table;
	}

	/** Instance of action encapsulation class. */
	protected CUP$Parser$actions action_obj;

	/** Action encapsulation object initializer. */
	protected void init_actions() {
		action_obj = new CUP$Parser$actions(this);
	}

	/** Invoke a user supplied parse action. */
	public java_cup.runtime.Symbol do_action(int act_num,
			java_cup.runtime.lr_parser parser, java.util.Stack stack, int top)
			throws java.lang.Exception {
		/* call code in generated class */
		return action_obj.CUP$Parser$do_action(act_num, parser, stack, top);
	}

	/** Indicates start state. */
	public int start_state() {
		return 0;
	}

	/** Indicates start production. */
	public int start_production() {
		return 1;
	}

	/** <code>EOF</code> Symbol index. */
	public int EOF_sym() {
		return 0;
	}

	/** <code>error</code> Symbol index. */
	public int error_sym() {
		return 1;
	}

	@Override
	public void report_fatal_error(String message, Object info)
			throws Exception {

		System.err.println("Erro fatal: Era esperado "
				+ ((Symbol) info).toString().split("Symbol: ")[1]);

	}

	@Override
	public void syntax_error(Symbol cur_token) {
		// TODO Auto-generated method stub
		report_error("Tokem encontrado ", cur_token);
	}

	@Override
	public void report_error(String message, Object info) {
		// TODO Auto-generated method stub
		System.err.println(message + info);
	}

	@Override
	public void unrecovered_syntax_error(Symbol cur_token) throws Exception {
		// TODO Auto-generated method stub
		System.err.println("Não foi possível a recuperação! Lido até o "
				+ cur_token);
	}

	private DefaultMutableTreeNode tree;

	public DefaultMutableTreeNode getTree() {
		return tree;
	}

	public void setTree(DefaultMutableTreeNode tree) {
		this.tree = tree;
	}

	public static DefaultMutableTreeNode main(String args[]) throws Exception {
		File[] file = {
				new File("src/oficial/programasEmTiny/lerEntrada.tiny"),
				new File("src/oficial/programasEmTiny/fatorial.tiny"),
				new File("src/oficial/programasEmTiny/exponencial.tiny"),
				new File(
						"src/oficial/programasEmTiny/contadorDeAlgarismos.tiny") };

		SymbolFactory sf = new ComplexSymbolFactory();

		Parser parser;

		if (args.length == 0) {

			parser = new Parser(new Scanner(new FileInputStream(file[0]), sf),
					sf);

		} else {

			parser = new Parser(new Scanner(
					new java.io.FileInputStream(args[0]), sf), sf);
		}

		parser.parse();

		return parser.getTree();

	}

}

/** Cup generated class to encapsulate user supplied action code. */
class CUP$Parser$actions {

	private Stack<DefaultMutableTreeNode> stackNodes = new Stack<DefaultMutableTreeNode>();

	private void addNonTerminal(java_cup.runtime.Symbol CUP$Parser$result,
			int childs) {

		DefaultMutableTreeNode node = newNode(CUP$Parser$result);

		int y = childs;

		int z = stackNodes.size();

		while (childs > 0) {

			node.add((MutableTreeNode) stackNodes.toArray()[z - childs]);

			childs--;

		}

		while (y > 0) {

			stackNodes.pop();

			y--;

		}

		stackNodes.push(node);

	}

	private void addTerminal(java.util.Stack CUP$Parser$stack,
			java_cup.runtime.Symbol CUP$Parser$result) {

		DefaultMutableTreeNode node = newNode(CUP$Parser$result);

		node.add(newNode((java_cup.runtime.Symbol) CUP$Parser$stack.peek()));

		stackNodes.push(node);

	}

	private DefaultMutableTreeNode newNode(
			java_cup.runtime.Symbol CUP$Parser$result) {

		return new DefaultMutableTreeNode(nodeName(CUP$Parser$result));

	}

	private String nodeName(java_cup.runtime.Symbol CUP$Parser$result) {

		return CUP$Parser$result.toString().split("Symbol: ")[1];

	}

	private void visualizarStack() {
		if (stackNodes.size() == 0)
			return;
		System.out.println("\nStack:\t");
		for (Object obj : stackNodes.toArray()) {

			System.out.print(((DefaultMutableTreeNode) obj).toString() + " | ");

		}
		System.out
				.println("\n---------------------------------------------------------------------------\n");
	}

	private final Parser parser;

	/** Constructor */
	CUP$Parser$actions(Parser parser) {
		this.parser = parser;
	}

	/** Method 0 with the actual generated action code for actions 0 to 300. */
	public final java_cup.runtime.Symbol CUP$Parser$do_action_part00000000(
			int CUP$Parser$act_num,
			java_cup.runtime.lr_parser CUP$Parser$parser,
			java.util.Stack CUP$Parser$stack, int CUP$Parser$top)
			throws java.lang.Exception {
		/* Symbol object for return from actions */
		java_cup.runtime.Symbol CUP$Parser$result;

		/* select the action based on the action number */
		switch (CUP$Parser$act_num) {
		/* . . . . . . . . . . . . . . . . . . . . */
		case 0: // programa ::= sequencia_sent
		{
			Object RESULT = null;
			System.out.println("programa ::= sequencia_sent");
			CUP$Parser$result = parser
					.getSymbolFactory()
					.newSymbol(
							"programa",
							0,
							((java_cup.runtime.Symbol) CUP$Parser$stack.peek()),
							((java_cup.runtime.Symbol) CUP$Parser$stack.peek()),
							RESULT);
			addNonTerminal(CUP$Parser$result, 1);
			parser.setTree(stackNodes.pop());
		}
			break;

		/* . . . . . . . . . . . . . . . . . . . . */
		case 1: // $START ::= programa EOF
		{
			Object RESULT = null;
			Location start_valxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol) CUP$Parser$stack
					.elementAt(CUP$Parser$top - 1)).xleft;
			Location start_valxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol) CUP$Parser$stack
					.elementAt(CUP$Parser$top - 1)).xright;
			Object start_val = (Object) ((java_cup.runtime.Symbol) CUP$Parser$stack
					.elementAt(CUP$Parser$top - 1)).value;
			RESULT = start_val;
			CUP$Parser$result = parser
					.getSymbolFactory()
					.newSymbol(
							"$START",
							0,
							((java_cup.runtime.Symbol) CUP$Parser$stack
									.elementAt(CUP$Parser$top - 1)),
							((java_cup.runtime.Symbol) CUP$Parser$stack.peek()),
							RESULT);
		}
			/* ACCEPT */
			CUP$Parser$parser.done_parsing();
			break;

		/* . . . . . . . . . . . . . . . . . . . . */
		case 2: // programa ::= error
		{
			Object RESULT = null;
			System.err.println("Era esperado sequência de senteças!");
			CUP$Parser$result = parser
					.getSymbolFactory()
					.newSymbol(
							"programa",
							0,
							((java_cup.runtime.Symbol) CUP$Parser$stack.peek()),
							((java_cup.runtime.Symbol) CUP$Parser$stack.peek()),
							RESULT);
		}
			break;

		/* . . . . . . . . . . . . . . . . . . . . */
		case 3: // sequencia_sent ::= sequencia_sent sent
		{
			Object RESULT = null;
			System.out.println("sequencia_sent ::= sequencia_sent sent");
			CUP$Parser$result = parser
					.getSymbolFactory()
					.newSymbol(
							"sequencia_sent",
							1,
							((java_cup.runtime.Symbol) CUP$Parser$stack
									.elementAt(CUP$Parser$top - 1)),
							((java_cup.runtime.Symbol) CUP$Parser$stack.peek()),
							RESULT);
			addNonTerminal(CUP$Parser$result, 2);
		}
			break;

		/* . . . . . . . . . . . . . . . . . . . . */
		case 4: // sequencia_sent ::= sent
		{
			Object RESULT = null;
			System.out.println("sequencia_sent ::= sent");
			CUP$Parser$result = parser
					.getSymbolFactory()
					.newSymbol(
							"sequencia_sent",
							1,
							((java_cup.runtime.Symbol) CUP$Parser$stack.peek()),
							((java_cup.runtime.Symbol) CUP$Parser$stack.peek()),
							RESULT);
			addNonTerminal(CUP$Parser$result, 1);
		}
			break;

		/* . . . . . . . . . . . . . . . . . . . . */
		case 5: // sent ::= sent_if
		{
			Object RESULT = null;
			System.out.println("sent ::= sent_if");
			CUP$Parser$result = parser
					.getSymbolFactory()
					.newSymbol(
							"sent",
							2,
							((java_cup.runtime.Symbol) CUP$Parser$stack.peek()),
							((java_cup.runtime.Symbol) CUP$Parser$stack.peek()),
							RESULT);
			addNonTerminal(CUP$Parser$result, 1);
		}
			break;

		/* . . . . . . . . . . . . . . . . . . . . */
		case 6: // sent ::= sent_repeat
		{
			Object RESULT = null;
			System.out.println("sent ::= sent_repeat");
			CUP$Parser$result = parser
					.getSymbolFactory()
					.newSymbol(
							"sent",
							2,
							((java_cup.runtime.Symbol) CUP$Parser$stack.peek()),
							((java_cup.runtime.Symbol) CUP$Parser$stack.peek()),
							RESULT);
			addNonTerminal(CUP$Parser$result, 1);
		}
			break;

		/* . . . . . . . . . . . . . . . . . . . . */
		case 7: // sent ::= sent_assign
		{
			Object RESULT = null;
			System.out.println("sent ::= sent_assign");
			CUP$Parser$result = parser
					.getSymbolFactory()
					.newSymbol(
							"sent",
							2,
							((java_cup.runtime.Symbol) CUP$Parser$stack.peek()),
							((java_cup.runtime.Symbol) CUP$Parser$stack.peek()),
							RESULT);
			addNonTerminal(CUP$Parser$result, 1);
		}
			break;

		/* . . . . . . . . . . . . . . . . . . . . */
		case 8: // sent ::= sent_read
		{
			Object RESULT = null;
			System.out.println("sent ::= sent_read");
			CUP$Parser$result = parser
					.getSymbolFactory()
					.newSymbol(
							"sent",
							2,
							((java_cup.runtime.Symbol) CUP$Parser$stack.peek()),
							((java_cup.runtime.Symbol) CUP$Parser$stack.peek()),
							RESULT);
			addNonTerminal(CUP$Parser$result, 1);
		}
			break;

		/* . . . . . . . . . . . . . . . . . . . . */
		case 9: // sent ::= sent_write
		{
			Object RESULT = null;
			System.out.println("sent ::= sent_write");
			CUP$Parser$result = parser
					.getSymbolFactory()
					.newSymbol(
							"sent",
							2,
							((java_cup.runtime.Symbol) CUP$Parser$stack.peek()),
							((java_cup.runtime.Symbol) CUP$Parser$stack.peek()),
							RESULT);
			addNonTerminal(CUP$Parser$result, 1);
		}
			break;

		/* . . . . . . . . . . . . . . . . . . . . */
		case 10: // sent_if ::= if exp then sequencia_sent end semi
		{
			Object RESULT = null;
			System.out
					.println("sent_if ::= if exp then sequencia_sent end semi");
			CUP$Parser$result = parser
					.getSymbolFactory()
					.newSymbol(
							"sent_if",
							3,
							((java_cup.runtime.Symbol) CUP$Parser$stack
									.elementAt(CUP$Parser$top - 5)),
							((java_cup.runtime.Symbol) CUP$Parser$stack.peek()),
							RESULT);
			addNonTerminal(CUP$Parser$result, 6);
		}
			break;

		/* . . . . . . . . . . . . . . . . . . . . */
		case 11: // sent_if ::= error exp then sequencia_sent end semi
		{
			Object RESULT = null;
			System.err.println("Era keyword: if!");
			CUP$Parser$result = parser
					.getSymbolFactory()
					.newSymbol(
							"sent_if",
							3,
							((java_cup.runtime.Symbol) CUP$Parser$stack
									.elementAt(CUP$Parser$top - 5)),
							((java_cup.runtime.Symbol) CUP$Parser$stack.peek()),
							RESULT);
		}
			break;

		/* . . . . . . . . . . . . . . . . . . . . */
		case 12: // sent_if ::= if error then sequencia_sent end semi
		{
			Object RESULT = null;
			System.err.println("Era esperado expressão!");
			CUP$Parser$result = parser
					.getSymbolFactory()
					.newSymbol(
							"sent_if",
							3,
							((java_cup.runtime.Symbol) CUP$Parser$stack
									.elementAt(CUP$Parser$top - 5)),
							((java_cup.runtime.Symbol) CUP$Parser$stack.peek()),
							RESULT);
		}
			break;

		/* . . . . . . . . . . . . . . . . . . . . */
		case 13: // sent_if ::= if exp error sequencia_sent end semi
		{
			Object RESULT = null;
			System.err.println("Era esperado keyword: then!");
			CUP$Parser$result = parser
					.getSymbolFactory()
					.newSymbol(
							"sent_if",
							3,
							((java_cup.runtime.Symbol) CUP$Parser$stack
									.elementAt(CUP$Parser$top - 5)),
							((java_cup.runtime.Symbol) CUP$Parser$stack.peek()),
							RESULT);
		}
			break;

		/* . . . . . . . . . . . . . . . . . . . . */
		case 14: // sent_if ::= if exp then error end semi
		{
			Object RESULT = null;
			System.err.println("Era esperado sequência de sentenças!");
			CUP$Parser$result = parser
					.getSymbolFactory()
					.newSymbol(
							"sent_if",
							3,
							((java_cup.runtime.Symbol) CUP$Parser$stack
									.elementAt(CUP$Parser$top - 5)),
							((java_cup.runtime.Symbol) CUP$Parser$stack.peek()),
							RESULT);
		}
			break;

		/* . . . . . . . . . . . . . . . . . . . . */
		case 15: // sent_if ::= if exp then sequencia_sent error semi
		{
			Object RESULT = null;
			System.err.println("Era esperado keyword: end!");
			CUP$Parser$result = parser
					.getSymbolFactory()
					.newSymbol(
							"sent_if",
							3,
							((java_cup.runtime.Symbol) CUP$Parser$stack
									.elementAt(CUP$Parser$top - 5)),
							((java_cup.runtime.Symbol) CUP$Parser$stack.peek()),
							RESULT);
		}
			break;

		/* . . . . . . . . . . . . . . . . . . . . */
		case 16: // sent_if ::= if exp then sequencia_sent end error
		{
			Object RESULT = null;
			System.err.println("Era esperado ponto-e-vírgula!");
			CUP$Parser$result = parser
					.getSymbolFactory()
					.newSymbol(
							"sent_if",
							3,
							((java_cup.runtime.Symbol) CUP$Parser$stack
									.elementAt(CUP$Parser$top - 5)),
							((java_cup.runtime.Symbol) CUP$Parser$stack.peek()),
							RESULT);
		}
			break;

		/* . . . . . . . . . . . . . . . . . . . . */
		case 17: // sent_if ::= if exp then sequencia_sent else sequencia_sent
					// end semi
		{
			Object RESULT = null;
			System.out
					.println("sent_if ::= if exp then sequencia_sent else sequencia_sent end semi");
			CUP$Parser$result = parser
					.getSymbolFactory()
					.newSymbol(
							"sent_if",
							3,
							((java_cup.runtime.Symbol) CUP$Parser$stack
									.elementAt(CUP$Parser$top - 7)),
							((java_cup.runtime.Symbol) CUP$Parser$stack.peek()),
							RESULT);
			addNonTerminal(CUP$Parser$result, 8);
		}
			break;

		/* . . . . . . . . . . . . . . . . . . . . */
		case 18: // sent_if ::= error exp then sequencia_sent else
					// sequencia_sent end semi
		{
			Object RESULT = null;
			System.err.println("Era keyword: if!");
			CUP$Parser$result = parser
					.getSymbolFactory()
					.newSymbol(
							"sent_if",
							3,
							((java_cup.runtime.Symbol) CUP$Parser$stack
									.elementAt(CUP$Parser$top - 7)),
							((java_cup.runtime.Symbol) CUP$Parser$stack.peek()),
							RESULT);
		}
			break;

		/* . . . . . . . . . . . . . . . . . . . . */
		case 19: // sent_if ::= if error then sequencia_sent else sequencia_sent
					// end semi
		{
			Object RESULT = null;
			System.err.println("Era esperado expressão!");
			CUP$Parser$result = parser
					.getSymbolFactory()
					.newSymbol(
							"sent_if",
							3,
							((java_cup.runtime.Symbol) CUP$Parser$stack
									.elementAt(CUP$Parser$top - 7)),
							((java_cup.runtime.Symbol) CUP$Parser$stack.peek()),
							RESULT);
		}
			break;

		/* . . . . . . . . . . . . . . . . . . . . */
		case 20: // sent_if ::= if exp error sequencia_sent else sequencia_sent
					// end semi
		{
			Object RESULT = null;
			System.err.println("Era esperado keyword: then!");
			CUP$Parser$result = parser
					.getSymbolFactory()
					.newSymbol(
							"sent_if",
							3,
							((java_cup.runtime.Symbol) CUP$Parser$stack
									.elementAt(CUP$Parser$top - 7)),
							((java_cup.runtime.Symbol) CUP$Parser$stack.peek()),
							RESULT);
		}
			break;

		/* . . . . . . . . . . . . . . . . . . . . */
		case 21: // sent_if ::= if exp then error else sequencia_sent end semi
		{
			Object RESULT = null;
			System.err.println("Era esperado sequência de sentenças!");
			CUP$Parser$result = parser
					.getSymbolFactory()
					.newSymbol(
							"sent_if",
							3,
							((java_cup.runtime.Symbol) CUP$Parser$stack
									.elementAt(CUP$Parser$top - 7)),
							((java_cup.runtime.Symbol) CUP$Parser$stack.peek()),
							RESULT);
		}
			break;

		/* . . . . . . . . . . . . . . . . . . . . */
		case 22: // sent_if ::= if exp then sequencia_sent error sequencia_sent
					// end semi
		{
			Object RESULT = null;
			System.err.println("Era esperado keyword: else!");
			CUP$Parser$result = parser
					.getSymbolFactory()
					.newSymbol(
							"sent_if",
							3,
							((java_cup.runtime.Symbol) CUP$Parser$stack
									.elementAt(CUP$Parser$top - 7)),
							((java_cup.runtime.Symbol) CUP$Parser$stack.peek()),
							RESULT);
		}
			break;

		/* . . . . . . . . . . . . . . . . . . . . */
		case 23: // sent_if ::= if exp then sequencia_sent else error end semi
		{
			Object RESULT = null;
			System.err.println("Era esperado sequência de sentenças!");
			CUP$Parser$result = parser
					.getSymbolFactory()
					.newSymbol(
							"sent_if",
							3,
							((java_cup.runtime.Symbol) CUP$Parser$stack
									.elementAt(CUP$Parser$top - 7)),
							((java_cup.runtime.Symbol) CUP$Parser$stack.peek()),
							RESULT);
		}
			break;

		/* . . . . . . . . . . . . . . . . . . . . */
		case 24: // sent_if ::= if exp then sequencia_sent else sequencia_sent
					// error semi
		{
			Object RESULT = null;
			System.err.println("Era esperado keyword: end!");
			CUP$Parser$result = parser
					.getSymbolFactory()
					.newSymbol(
							"sent_if",
							3,
							((java_cup.runtime.Symbol) CUP$Parser$stack
									.elementAt(CUP$Parser$top - 7)),
							((java_cup.runtime.Symbol) CUP$Parser$stack.peek()),
							RESULT);
		}
			break;

		/* . . . . . . . . . . . . . . . . . . . . */
		case 25: // sent_if ::= if exp then sequencia_sent else sequencia_sent
					// end error
		{
			Object RESULT = null;
			System.err.println("Era esperado ponto-e-vírgula!");
			CUP$Parser$result = parser
					.getSymbolFactory()
					.newSymbol(
							"sent_if",
							3,
							((java_cup.runtime.Symbol) CUP$Parser$stack
									.elementAt(CUP$Parser$top - 7)),
							((java_cup.runtime.Symbol) CUP$Parser$stack.peek()),
							RESULT);
		}
			break;

		/* . . . . . . . . . . . . . . . . . . . . */
		case 26: // sent_repeat ::= repeat sequencia_sent until exp semi
		{
			Object RESULT = null;
			System.out
					.println("sent_repeat ::= repeat sequencia_sent until exp semi");
			CUP$Parser$result = parser
					.getSymbolFactory()
					.newSymbol(
							"sent_repeat",
							4,
							((java_cup.runtime.Symbol) CUP$Parser$stack
									.elementAt(CUP$Parser$top - 4)),
							((java_cup.runtime.Symbol) CUP$Parser$stack.peek()),
							RESULT);
			addNonTerminal(CUP$Parser$result, 5);
		}
			break;

		/* . . . . . . . . . . . . . . . . . . . . */
		case 27: // sent_repeat ::= repeat sequencia_sent until exp error
		{
			Object RESULT = null;
			System.err.println("Era esperado ponto-e-vírgula!");
			CUP$Parser$result = parser
					.getSymbolFactory()
					.newSymbol(
							"sent_repeat",
							4,
							((java_cup.runtime.Symbol) CUP$Parser$stack
									.elementAt(CUP$Parser$top - 4)),
							((java_cup.runtime.Symbol) CUP$Parser$stack.peek()),
							RESULT);
		}
			break;

		/* . . . . . . . . . . . . . . . . . . . . */
		case 28: // sent_repeat ::= repeat sequencia_sent until error semi
		{
			Object RESULT = null;
			System.err.println("Era esperado expressão!");
			CUP$Parser$result = parser
					.getSymbolFactory()
					.newSymbol(
							"sent_repeat",
							4,
							((java_cup.runtime.Symbol) CUP$Parser$stack
									.elementAt(CUP$Parser$top - 4)),
							((java_cup.runtime.Symbol) CUP$Parser$stack.peek()),
							RESULT);
		}
			break;

		/* . . . . . . . . . . . . . . . . . . . . */
		case 29: // sent_repeat ::= repeat error until exp semi
		{
			Object RESULT = null;
			System.err.println("Era esperado sequência de sentenças!");
			CUP$Parser$result = parser
					.getSymbolFactory()
					.newSymbol(
							"sent_repeat",
							4,
							((java_cup.runtime.Symbol) CUP$Parser$stack
									.elementAt(CUP$Parser$top - 4)),
							((java_cup.runtime.Symbol) CUP$Parser$stack.peek()),
							RESULT);
		}
			break;

		/* . . . . . . . . . . . . . . . . . . . . */
		case 30: // sent_repeat ::= error sequencia_sent until exp semi
		{
			Object RESULT = null;
			System.err.println("Era esperado keyword: repeat!");
			CUP$Parser$result = parser
					.getSymbolFactory()
					.newSymbol(
							"sent_repeat",
							4,
							((java_cup.runtime.Symbol) CUP$Parser$stack
									.elementAt(CUP$Parser$top - 4)),
							((java_cup.runtime.Symbol) CUP$Parser$stack.peek()),
							RESULT);
		}
			break;

		/* . . . . . . . . . . . . . . . . . . . . */
		case 31: // sent_assign ::= id op_atribb exp semi
		{
			Object RESULT = null;
			System.out.println("sent_assign ::= id op_atribb exp semi");
			CUP$Parser$result = parser
					.getSymbolFactory()
					.newSymbol(
							"sent_assign",
							5,
							((java_cup.runtime.Symbol) CUP$Parser$stack
									.elementAt(CUP$Parser$top - 3)),
							((java_cup.runtime.Symbol) CUP$Parser$stack.peek()),
							RESULT);
			addNonTerminal(CUP$Parser$result, 4);
		}
			break;

		/* . . . . . . . . . . . . . . . . . . . . */
		case 32: // sent_assign ::= error op_atribb exp semi
		{
			Object RESULT = null;
			System.err.println("Era esperado identificador!");
			CUP$Parser$result = parser
					.getSymbolFactory()
					.newSymbol(
							"sent_assign",
							5,
							((java_cup.runtime.Symbol) CUP$Parser$stack
									.elementAt(CUP$Parser$top - 3)),
							((java_cup.runtime.Symbol) CUP$Parser$stack.peek()),
							RESULT);
		}
			break;

		/* . . . . . . . . . . . . . . . . . . . . */
		case 33: // sent_assign ::= id op_atribb error semi
		{
			Object RESULT = null;
			System.err.println("Era esperado expressão!");
			CUP$Parser$result = parser
					.getSymbolFactory()
					.newSymbol(
							"sent_assign",
							5,
							((java_cup.runtime.Symbol) CUP$Parser$stack
									.elementAt(CUP$Parser$top - 3)),
							((java_cup.runtime.Symbol) CUP$Parser$stack.peek()),
							RESULT);
		}
			break;

		/* . . . . . . . . . . . . . . . . . . . . */
		case 34: // sent_assign ::= id op_atribb exp error
		{
			Object RESULT = null;
			System.err.println("Era esperado ponto-e-vírgula!");
			CUP$Parser$result = parser
					.getSymbolFactory()
					.newSymbol(
							"sent_assign",
							5,
							((java_cup.runtime.Symbol) CUP$Parser$stack
									.elementAt(CUP$Parser$top - 3)),
							((java_cup.runtime.Symbol) CUP$Parser$stack.peek()),
							RESULT);
		}
			break;

		/* . . . . . . . . . . . . . . . . . . . . */
		case 35: // sent_read ::= read id semi
		{
			Object RESULT = null;
			System.out.println("sent_read ::= read id semi");
			CUP$Parser$result = parser
					.getSymbolFactory()
					.newSymbol(
							"sent_read",
							6,
							((java_cup.runtime.Symbol) CUP$Parser$stack
									.elementAt(CUP$Parser$top - 2)),
							((java_cup.runtime.Symbol) CUP$Parser$stack.peek()),
							RESULT);
			addNonTerminal(CUP$Parser$result, 3);
		}
			break;

		/* . . . . . . . . . . . . . . . . . . . . */
		case 36: // sent_read ::= read error semi
		{
			Object RESULT = null;
			System.err.println("Era esperado identificador!");
			CUP$Parser$result = parser
					.getSymbolFactory()
					.newSymbol(
							"sent_read",
							6,
							((java_cup.runtime.Symbol) CUP$Parser$stack
									.elementAt(CUP$Parser$top - 2)),
							((java_cup.runtime.Symbol) CUP$Parser$stack.peek()),
							RESULT);
		}
			break;

		/* . . . . . . . . . . . . . . . . . . . . */
		case 37: // sent_read ::= read id error
		{
			Object RESULT = null;
			System.err.println("Era esperado ponto-e-vírgula!");
			CUP$Parser$result = parser
					.getSymbolFactory()
					.newSymbol(
							"sent_read",
							6,
							((java_cup.runtime.Symbol) CUP$Parser$stack
									.elementAt(CUP$Parser$top - 2)),
							((java_cup.runtime.Symbol) CUP$Parser$stack.peek()),
							RESULT);
		}
			break;

		/* . . . . . . . . . . . . . . . . . . . . */
		case 38: // sent_write ::= write exp semi
		{
			Object RESULT = null;
			System.out.println("sent_write ::= write exp semi");
			CUP$Parser$result = parser
					.getSymbolFactory()
					.newSymbol(
							"sent_write",
							7,
							((java_cup.runtime.Symbol) CUP$Parser$stack
									.elementAt(CUP$Parser$top - 2)),
							((java_cup.runtime.Symbol) CUP$Parser$stack.peek()),
							RESULT);
			addNonTerminal(CUP$Parser$result, 3);
		}
			break;

		/* . . . . . . . . . . . . . . . . . . . . */
		case 39: // sent_write ::= write error semi
		{
			Object RESULT = null;
			System.err.println("Era esperado expressão!");
			CUP$Parser$result = parser
					.getSymbolFactory()
					.newSymbol(
							"sent_write",
							7,
							((java_cup.runtime.Symbol) CUP$Parser$stack
									.elementAt(CUP$Parser$top - 2)),
							((java_cup.runtime.Symbol) CUP$Parser$stack.peek()),
							RESULT);
		}
			break;

		/* . . . . . . . . . . . . . . . . . . . . */
		case 40: // sent_write ::= error exp semi
		{
			Object RESULT = null;
			System.err.println("Era esperado keyword: write!");
			CUP$Parser$result = parser
					.getSymbolFactory()
					.newSymbol(
							"sent_write",
							7,
							((java_cup.runtime.Symbol) CUP$Parser$stack
									.elementAt(CUP$Parser$top - 2)),
							((java_cup.runtime.Symbol) CUP$Parser$stack.peek()),
							RESULT);
		}
			break;

		/* . . . . . . . . . . . . . . . . . . . . */
		case 41: // sent_write ::= write exp error
		{
			Object RESULT = null;
			System.err.println("Era esperado ponto-e-vírgula!");
			CUP$Parser$result = parser
					.getSymbolFactory()
					.newSymbol(
							"sent_write",
							7,
							((java_cup.runtime.Symbol) CUP$Parser$stack
									.elementAt(CUP$Parser$top - 2)),
							((java_cup.runtime.Symbol) CUP$Parser$stack.peek()),
							RESULT);
		}
			break;

		/* . . . . . . . . . . . . . . . . . . . . */
		case 42: // exp ::= exp_simple op_comp exp_simple
		{
			Object RESULT = null;
			System.out.println("exp ::= exp_simple op_comp exp_simple");
			CUP$Parser$result = parser
					.getSymbolFactory()
					.newSymbol(
							"exp",
							8,
							((java_cup.runtime.Symbol) CUP$Parser$stack
									.elementAt(CUP$Parser$top - 2)),
							((java_cup.runtime.Symbol) CUP$Parser$stack.peek()),
							RESULT);
			addNonTerminal(CUP$Parser$result, 3);
		}
			break;

		/* . . . . . . . . . . . . . . . . . . . . */
		case 43: // exp ::= exp_simple
		{
			Object RESULT = null;
			System.out.println("exp ::= exp_simple");
			CUP$Parser$result = parser
					.getSymbolFactory()
					.newSymbol(
							"exp",
							8,
							((java_cup.runtime.Symbol) CUP$Parser$stack.peek()),
							((java_cup.runtime.Symbol) CUP$Parser$stack.peek()),
							RESULT);
			addNonTerminal(CUP$Parser$result, 1);
		}
			break;

		/* . . . . . . . . . . . . . . . . . . . . */
		case 44: // exp ::= error op_comp exp_simple
		{
			Object RESULT = null;
			System.err.println("Era esperado expressão!");
			CUP$Parser$result = parser
					.getSymbolFactory()
					.newSymbol(
							"exp",
							8,
							((java_cup.runtime.Symbol) CUP$Parser$stack
									.elementAt(CUP$Parser$top - 2)),
							((java_cup.runtime.Symbol) CUP$Parser$stack.peek()),
							RESULT);
		}
			break;

		/* . . . . . . . . . . . . . . . . . . . . */
		case 45: // exp_simple ::= exp_simple op_add exp_simple
		{
			Object RESULT = null;
			System.out.println("exp_simple ::= exp_simple op_add exp_simple");
			CUP$Parser$result = parser
					.getSymbolFactory()
					.newSymbol(
							"exp_simple",
							9,
							((java_cup.runtime.Symbol) CUP$Parser$stack
									.elementAt(CUP$Parser$top - 2)),
							((java_cup.runtime.Symbol) CUP$Parser$stack.peek()),
							RESULT);
			addNonTerminal(CUP$Parser$result, 3);
		}
			break;

		/* . . . . . . . . . . . . . . . . . . . . */
		case 46: // exp_simple ::= term
		{
			Object RESULT = null;
			System.out.println("exp_simple ::= term");
			CUP$Parser$result = parser
					.getSymbolFactory()
					.newSymbol(
							"exp_simple",
							9,
							((java_cup.runtime.Symbol) CUP$Parser$stack.peek()),
							((java_cup.runtime.Symbol) CUP$Parser$stack.peek()),
							RESULT);
			addNonTerminal(CUP$Parser$result, 1);
		}
			break;

		/* . . . . . . . . . . . . . . . . . . . . */
		case 47: // exp_simple ::= error op_add exp_simple
		{
			Object RESULT = null;
			System.err.println("Era esperado expressão!");
			CUP$Parser$result = parser
					.getSymbolFactory()
					.newSymbol(
							"exp_simple",
							9,
							((java_cup.runtime.Symbol) CUP$Parser$stack
									.elementAt(CUP$Parser$top - 2)),
							((java_cup.runtime.Symbol) CUP$Parser$stack.peek()),
							RESULT);
		}
			break;

		/* . . . . . . . . . . . . . . . . . . . . */
		case 48: // term ::= term op_mult op_factor
		{
			Object RESULT = null;
			System.out.println("term ::= term op_mult op_factor");
			CUP$Parser$result = parser
					.getSymbolFactory()
					.newSymbol(
							"term",
							10,
							((java_cup.runtime.Symbol) CUP$Parser$stack
									.elementAt(CUP$Parser$top - 2)),
							((java_cup.runtime.Symbol) CUP$Parser$stack.peek()),
							RESULT);
			addNonTerminal(CUP$Parser$result, 3);
		}
			break;

		/* . . . . . . . . . . . . . . . . . . . . */
		case 49: // term ::= op_factor
		{
			Object RESULT = null;
			System.out.println("term ::= op_factor");
			CUP$Parser$result = parser
					.getSymbolFactory()
					.newSymbol(
							"term",
							10,
							((java_cup.runtime.Symbol) CUP$Parser$stack.peek()),
							((java_cup.runtime.Symbol) CUP$Parser$stack.peek()),
							RESULT);
			addNonTerminal(CUP$Parser$result, 1);
		}
			break;

		/* . . . . . . . . . . . . . . . . . . . . */
		case 50: // term ::= error op_mult op_factor
		{
			Object RESULT = null;
			System.err.println("Era esperado term!");
			CUP$Parser$result = parser
					.getSymbolFactory()
					.newSymbol(
							"term",
							10,
							((java_cup.runtime.Symbol) CUP$Parser$stack
									.elementAt(CUP$Parser$top - 2)),
							((java_cup.runtime.Symbol) CUP$Parser$stack.peek()),
							RESULT);
		}
			break;

		/* . . . . . . . . . . . . . . . . . . . . */
		case 51: // op_factor ::= lparen exp rparen
		{
			Integer RESULT = null;
			System.out.println("op_factor ::= lparen exp rparen");
			CUP$Parser$result = parser
					.getSymbolFactory()
					.newSymbol(
							"op_factor",
							27,
							((java_cup.runtime.Symbol) CUP$Parser$stack
									.elementAt(CUP$Parser$top - 2)),
							((java_cup.runtime.Symbol) CUP$Parser$stack.peek()),
							RESULT);
			addNonTerminal(CUP$Parser$result, 3);
		}
			break;

		/* . . . . . . . . . . . . . . . . . . . . */
		case 52: // op_factor ::= number
		{
			Integer RESULT = null;
			System.out.println("op_factor ::= number");
			CUP$Parser$result = parser
					.getSymbolFactory()
					.newSymbol(
							"op_factor",
							27,
							((java_cup.runtime.Symbol) CUP$Parser$stack.peek()),
							((java_cup.runtime.Symbol) CUP$Parser$stack.peek()),
							RESULT);
			addNonTerminal(CUP$Parser$result, 1);
		}
			break;

		/* . . . . . . . . . . . . . . . . . . . . */
		case 53: // op_factor ::= id
		{
			Integer RESULT = null;
			System.out.println("op_factor ::= id");
			CUP$Parser$result = parser
					.getSymbolFactory()
					.newSymbol(
							"op_factor",
							27,
							((java_cup.runtime.Symbol) CUP$Parser$stack.peek()),
							((java_cup.runtime.Symbol) CUP$Parser$stack.peek()),
							RESULT);
			addNonTerminal(CUP$Parser$result, 1);
		}
			break;

		/* . . . . . . . . . . . . . . . . . . . . */
		case 54: // op_factor ::= error exp rparen
		{
			Integer RESULT = null;
			System.err.println("Era esperado abre-parênteses!");
			CUP$Parser$result = parser
					.getSymbolFactory()
					.newSymbol(
							"op_factor",
							27,
							((java_cup.runtime.Symbol) CUP$Parser$stack
									.elementAt(CUP$Parser$top - 2)),
							((java_cup.runtime.Symbol) CUP$Parser$stack.peek()),
							RESULT);
		}
			break;

		/* . . . . . . . . . . . . . . . . . . . . */
		case 55: // op_factor ::= lparen error rparen
		{
			Integer RESULT = null;
			System.err.println("Era esperado expressão!");
			CUP$Parser$result = parser
					.getSymbolFactory()
					.newSymbol(
							"op_factor",
							27,
							((java_cup.runtime.Symbol) CUP$Parser$stack
									.elementAt(CUP$Parser$top - 2)),
							((java_cup.runtime.Symbol) CUP$Parser$stack.peek()),
							RESULT);
		}
			break;

		/* . . . . . . . . . . . . . . . . . . . . */
		case 56: // op_factor ::= lparen exp error
		{
			Integer RESULT = null;
			System.err.println("Era esperado fecha-parênteses!");
			CUP$Parser$result = parser
					.getSymbolFactory()
					.newSymbol(
							"op_factor",
							27,
							((java_cup.runtime.Symbol) CUP$Parser$stack
									.elementAt(CUP$Parser$top - 2)),
							((java_cup.runtime.Symbol) CUP$Parser$stack.peek()),
							RESULT);
		}
			break;

		/* . . . . . . . . . . . . . . . . . . . . */
		case 57: // op_mult ::= OP_MULT
		{
			Object RESULT = null;
			System.out.println("op_mult ::= OP_MULT");
			CUP$Parser$result = parser
					.getSymbolFactory()
					.newSymbol(
							"op_mult",
							13,
							((java_cup.runtime.Symbol) CUP$Parser$stack.peek()),
							((java_cup.runtime.Symbol) CUP$Parser$stack.peek()),
							RESULT);
			addTerminal(CUP$Parser$stack, CUP$Parser$result);
		}
			break;

		/* . . . . . . . . . . . . . . . . . . . . */
		case 58: // op_mult ::= OP_QUOC
		{
			Object RESULT = null;
			System.out.println("op_mult ::= OP_QUOC");
			CUP$Parser$result = parser
					.getSymbolFactory()
					.newSymbol(
							"op_mult",
							13,
							((java_cup.runtime.Symbol) CUP$Parser$stack.peek()),
							((java_cup.runtime.Symbol) CUP$Parser$stack.peek()),
							RESULT);
			addTerminal(CUP$Parser$stack, CUP$Parser$result);
		}
			break;

		/* . . . . . . . . . . . . . . . . . . . . */
		case 59: // op_add ::= OP_ADD
		{
			Object RESULT = null;
			System.out.println("op_add ::= OP_ADD");
			CUP$Parser$result = parser
					.getSymbolFactory()
					.newSymbol(
							"op_add",
							12,
							((java_cup.runtime.Symbol) CUP$Parser$stack.peek()),
							((java_cup.runtime.Symbol) CUP$Parser$stack.peek()),
							RESULT);
			addTerminal(CUP$Parser$stack, CUP$Parser$result);
		}
			break;

		/* . . . . . . . . . . . . . . . . . . . . */
		case 60: // op_add ::= OP_SUB
		{
			Object RESULT = null;
			System.out.println("op_add ::= OP_SUB");
			CUP$Parser$result = parser
					.getSymbolFactory()
					.newSymbol(
							"op_add",
							12,
							((java_cup.runtime.Symbol) CUP$Parser$stack.peek()),
							((java_cup.runtime.Symbol) CUP$Parser$stack.peek()),
							RESULT);
			addTerminal(CUP$Parser$stack, CUP$Parser$result);
		}
			break;

		/* . . . . . . . . . . . . . . . . . . . . */
		case 61: // op_comp ::= OP_MQ
		{
			Object RESULT = null;
			System.out.println("op_comp ::= OP_MQ");
			CUP$Parser$result = parser
					.getSymbolFactory()
					.newSymbol(
							"op_comp",
							11,
							((java_cup.runtime.Symbol) CUP$Parser$stack.peek()),
							((java_cup.runtime.Symbol) CUP$Parser$stack.peek()),
							RESULT);
			addTerminal(CUP$Parser$stack, CUP$Parser$result);
		}
			break;

		/* . . . . . . . . . . . . . . . . . . . . */
		case 62: // op_comp ::= OP_IGUAL
		{
			Object RESULT = null;
			System.out.println("op_comp ::= OP_IGUAL");
			CUP$Parser$result = parser
					.getSymbolFactory()
					.newSymbol(
							"op_comp",
							11,
							((java_cup.runtime.Symbol) CUP$Parser$stack.peek()),
							((java_cup.runtime.Symbol) CUP$Parser$stack.peek()),
							RESULT);
			addTerminal(CUP$Parser$stack, CUP$Parser$result);
		}
			break;

		/* . . . . . . . . . . . . . . . . . . . . */
		case 63: // if ::= IF
		{
			Object RESULT = null;
			System.out.println("if ::= IF");
			CUP$Parser$result = parser
					.getSymbolFactory()
					.newSymbol(
							"if",
							14,
							((java_cup.runtime.Symbol) CUP$Parser$stack.peek()),
							((java_cup.runtime.Symbol) CUP$Parser$stack.peek()),
							RESULT);
			addTerminal(CUP$Parser$stack, CUP$Parser$result);
		}
			break;

		/* . . . . . . . . . . . . . . . . . . . . */
		case 64: // then ::= THEN
		{
			Object RESULT = null;
			System.out.println("then ::= THEN");
			CUP$Parser$result = parser
					.getSymbolFactory()
					.newSymbol(
							"then",
							15,
							((java_cup.runtime.Symbol) CUP$Parser$stack.peek()),
							((java_cup.runtime.Symbol) CUP$Parser$stack.peek()),
							RESULT);
			addTerminal(CUP$Parser$stack, CUP$Parser$result);
		}
			break;

		/* . . . . . . . . . . . . . . . . . . . . */
		case 65: // end ::= END
		{
			Object RESULT = null;
			System.out.println("end ::= END");
			CUP$Parser$result = parser
					.getSymbolFactory()
					.newSymbol(
							"end",
							16,
							((java_cup.runtime.Symbol) CUP$Parser$stack.peek()),
							((java_cup.runtime.Symbol) CUP$Parser$stack.peek()),
							RESULT);
			addTerminal(CUP$Parser$stack, CUP$Parser$result);
		}
			break;

		/* . . . . . . . . . . . . . . . . . . . . */
		case 66: // else ::= ELSE
		{
			Object RESULT = null;
			System.out.println("else ::= ELSE");
			CUP$Parser$result = parser
					.getSymbolFactory()
					.newSymbol(
							"else",
							17,
							((java_cup.runtime.Symbol) CUP$Parser$stack.peek()),
							((java_cup.runtime.Symbol) CUP$Parser$stack.peek()),
							RESULT);
			addTerminal(CUP$Parser$stack, CUP$Parser$result);
		}
			break;

		/* . . . . . . . . . . . . . . . . . . . . */
		case 67: // repeat ::= REPEAT
		{
			Object RESULT = null;
			System.out.println("repeat ::= REPEAT");
			CUP$Parser$result = parser
					.getSymbolFactory()
					.newSymbol(
							"repeat",
							18,
							((java_cup.runtime.Symbol) CUP$Parser$stack.peek()),
							((java_cup.runtime.Symbol) CUP$Parser$stack.peek()),
							RESULT);
			addTerminal(CUP$Parser$stack, CUP$Parser$result);
		}
			break;

		/* . . . . . . . . . . . . . . . . . . . . */
		case 68: // until ::= UNTIL
		{
			Object RESULT = null;
			System.out.println("until ::= UNTIL");
			CUP$Parser$result = parser
					.getSymbolFactory()
					.newSymbol(
							"until",
							19,
							((java_cup.runtime.Symbol) CUP$Parser$stack.peek()),
							((java_cup.runtime.Symbol) CUP$Parser$stack.peek()),
							RESULT);
			addTerminal(CUP$Parser$stack, CUP$Parser$result);
		}
			break;

		/* . . . . . . . . . . . . . . . . . . . . */
		case 69: // id ::= ID
		{
			Object RESULT = null;
			System.out.println("id ::= ID");
			CUP$Parser$result = parser
					.getSymbolFactory()
					.newSymbol(
							"id",
							20,
							((java_cup.runtime.Symbol) CUP$Parser$stack.peek()),
							((java_cup.runtime.Symbol) CUP$Parser$stack.peek()),
							RESULT);
			addTerminal(CUP$Parser$stack, CUP$Parser$result);
		}
			break;

		/* . . . . . . . . . . . . . . . . . . . . */
		case 70: // op_atribb ::= OP_ATRIB
		{
			Object RESULT = null;
			System.out.println("op_atribb ::= OP_ATRIB");
			CUP$Parser$result = parser
					.getSymbolFactory()
					.newSymbol(
							"op_atribb",
							21,
							((java_cup.runtime.Symbol) CUP$Parser$stack.peek()),
							((java_cup.runtime.Symbol) CUP$Parser$stack.peek()),
							RESULT);
			addTerminal(CUP$Parser$stack, CUP$Parser$result);
		}
			break;

		/* . . . . . . . . . . . . . . . . . . . . */
		case 71: // read ::= READ
		{
			Object RESULT = null;
			System.out.println("read ::= READ");
			CUP$Parser$result = parser
					.getSymbolFactory()
					.newSymbol(
							"read",
							22,
							((java_cup.runtime.Symbol) CUP$Parser$stack.peek()),
							((java_cup.runtime.Symbol) CUP$Parser$stack.peek()),
							RESULT);
			addTerminal(CUP$Parser$stack, CUP$Parser$result);
		}
			break;

		/* . . . . . . . . . . . . . . . . . . . . */
		case 72: // write ::= WRITE
		{
			Object RESULT = null;
			System.out.println("write ::= WRITE");
			CUP$Parser$result = parser
					.getSymbolFactory()
					.newSymbol(
							"write",
							23,
							((java_cup.runtime.Symbol) CUP$Parser$stack.peek()),
							((java_cup.runtime.Symbol) CUP$Parser$stack.peek()),
							RESULT);
			addTerminal(CUP$Parser$stack, CUP$Parser$result);
		}
			break;

		/* . . . . . . . . . . . . . . . . . . . . */
		case 73: // number ::= NUMBER
		{
			Integer RESULT = null;
			System.out.println("number ::= NUMBER");
			CUP$Parser$result = parser
					.getSymbolFactory()
					.newSymbol(
							"number",
							28,
							((java_cup.runtime.Symbol) CUP$Parser$stack.peek()),
							((java_cup.runtime.Symbol) CUP$Parser$stack.peek()),
							RESULT);
			addTerminal(CUP$Parser$stack, CUP$Parser$result);
		}
			break;

		/* . . . . . . . . . . . . . . . . . . . . */
		case 74: // lparen ::= LPAREN
		{
			Object RESULT = null;
			System.out.println("lparen ::= LPAREN");
			CUP$Parser$result = parser
					.getSymbolFactory()
					.newSymbol(
							"lparen",
							24,
							((java_cup.runtime.Symbol) CUP$Parser$stack.peek()),
							((java_cup.runtime.Symbol) CUP$Parser$stack.peek()),
							RESULT);
			addTerminal(CUP$Parser$stack, CUP$Parser$result);
		}
			break;

		/* . . . . . . . . . . . . . . . . . . . . */
		case 75: // rparen ::= RPAREN
		{
			Object RESULT = null;
			System.out.println("rparen ::= RPAREN");
			CUP$Parser$result = parser
					.getSymbolFactory()
					.newSymbol(
							"rparen",
							25,
							((java_cup.runtime.Symbol) CUP$Parser$stack.peek()),
							((java_cup.runtime.Symbol) CUP$Parser$stack.peek()),
							RESULT);
			addTerminal(CUP$Parser$stack, CUP$Parser$result);
		}
			break;

		/* . . . . . . . . . . . . . . . . . . . . */
		case 76: // semi ::= SEMI
		{
			Object RESULT = null;
			System.out.println("semi ::= SEMI");
			CUP$Parser$result = parser
					.getSymbolFactory()
					.newSymbol(
							"semi",
							26,
							((java_cup.runtime.Symbol) CUP$Parser$stack.peek()),
							((java_cup.runtime.Symbol) CUP$Parser$stack.peek()),
							RESULT);
			addTerminal(CUP$Parser$stack, CUP$Parser$result);
		}
			break;

		/* . . . . . . */
		default:
			throw new Exception("Invalid action number " + CUP$Parser$act_num
					+ "found in internal parse table");

		}

		visualizarStack();

		return CUP$Parser$result;

	} /* end of method */

	/** Method splitting the generated action code into several parts. */
	public final java_cup.runtime.Symbol CUP$Parser$do_action(
			int CUP$Parser$act_num,
			java_cup.runtime.lr_parser CUP$Parser$parser,
			java.util.Stack CUP$Parser$stack, int CUP$Parser$top)
			throws java.lang.Exception {
		return CUP$Parser$do_action_part00000000(CUP$Parser$act_num,
				CUP$Parser$parser, CUP$Parser$stack, CUP$Parser$top);
	}
}
